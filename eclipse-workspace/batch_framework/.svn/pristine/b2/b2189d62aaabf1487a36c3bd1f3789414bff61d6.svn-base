package com.forms.framework.persistence;

/**
 * ConnectionManager manage all database connections used in batch system.<br>
 * There can be more databases managed in this class.<br>
 * One database one connection manager instance.<br>
 * But only on default database,when we call getInstance(), it return a manager intance to the default database.
 * 
 * Note:we must register the database before useing it.
 */

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.commons.dbcp.BasicDataSourceFactory;

import com.forms.framework.exception.BatchFrameworkException;
import com.forms.framework.util.ResourceUtil;

public class ConnectionManager
{
	private static HashMap<String, ConnectionManager> connMgrMap = null;

	private static String defaultDatabase = null;

	private DataSource dataSource = null;

	private String databaseName = null;

	private String url = null;

	private String driverClassName = null;

	private String userName = null;

	private String defaultSchema = null;

	public static String getDefaultDatabase()
	{
		return defaultDatabase;
	}

	public static void setDefaultDatabase(String ip_a_defaultDatabase)
	{

		defaultDatabase = ip_a_defaultDatabase;
	}

	public DataSource getDataSource()
	{
		return dataSource;
	}

	public String getDatabaseName()
	{
		return databaseName;
	}

	public String getUrl()
	{
		return url;
	}

	public String getDriverClassName()
	{
		return driverClassName;
	}

	public void setUrl(String ip_a_url)
	{
		url = ip_a_url;
	}

	public String getUserName()
	{
		return userName;
	}

	public String getDefaultSchema()
	{
		return defaultSchema;
	}
	

	/**
	 * return a manager intance to the specified database.
	 * 
	 * @param a_databaseName:the
	 *            specified database.
	 */
	public static synchronized ConnectionManager getInstance(
			String ip_a_databaseName) throws BatchFrameworkException
	{
		if (ip_a_databaseName == null)
		{
			throw new BatchFrameworkException(
					"Database name can not be null");
		}
		if (connMgrMap == null)
		{
			throw new BatchFrameworkException(
					"No database registered in ConnectionManager");
		}
		ConnectionManager loc_connMgr = connMgrMap.get(ip_a_databaseName.trim()
				.toUpperCase());
		if (loc_connMgr == null)
		{
			throw new BatchFrameworkException(
					"No database registered with name:" + ip_a_databaseName);
		}
		return loc_connMgr;
	}

	/**
	 * return a manager intance to the default database.
	 */
	public static synchronized ConnectionManager getInstance()
			throws BatchFrameworkException
	{
		if (defaultDatabase == null)
		{
			throw new BatchFrameworkException(
					"No default database name registered");
		}
		return getInstance(defaultDatabase);
	}

	/**
	 * Register the database properties.<br>
	 * We must register the database before useing it.
	 */
	public static void registerDatabase(Properties ip_a_prop)
			throws BatchFrameworkException
	{
		if (ip_a_prop == null)
		{
			throw new BatchFrameworkException(
					"Can not register a database with null properties");
		}
		if (ip_a_prop.getProperty("databaseName") == null)
		{
			throw new BatchFrameworkException(
					"Can not register a database with null database name");
		}
		ConnectionManager loc_connMgr = new ConnectionManager(ip_a_prop);
		if (loc_connMgr == null)
		{
			throw new BatchFrameworkException("Database not registered");
		}
		if (connMgrMap == null)
		{
			connMgrMap = new HashMap<String, ConnectionManager>();
		}
		connMgrMap.put(ip_a_prop.getProperty("databaseName").trim().toUpperCase(),
				loc_connMgr);
	}

	/**
	 * Create a new connection manager instance through properties.<br>
	 * One database one connection manager instance.
	 */
	private ConnectionManager(Properties ip_a_prop)
			throws BatchFrameworkException
	{
		try
		{
			dataSource = BasicDataSourceFactory.createDataSource(ip_a_prop);
			this.databaseName = ip_a_prop.getProperty("databaseName");
			this.url = ip_a_prop.getProperty("url");
			this.driverClassName = ip_a_prop.getProperty("driverClassName");
			this.userName = ip_a_prop.getProperty("userName");
			this.defaultSchema = ip_a_prop.getProperty("defaultSchema");
		} catch (Exception ip_ex)
		{
			ip_ex.printStackTrace();
			throw new BatchFrameworkException(ip_ex);
		}
	}

	
	public Connection getConnection() throws BatchFrameworkException
	{
		Connection loc_conn = null;
		
		try
		{
			loc_conn = dataSource.getConnection();
		} catch (Exception ip_ex)
		{
			throw new BatchFrameworkException(ip_ex);
		}
		return loc_conn;
	}
	public static ConnectionManager loc_connManager ;
	public synchronized static ConnectionManager getInstance_ffp () throws Exception{
		if(loc_connManager == null){
			Properties loc_prop = (Properties) ResourceUtil.getInstance().getResource("ffpdbProperty", ResourceUtil.RESOURCE_PROPERTIES_TYPE);
			loc_connManager = new ConnectionManager(loc_prop);
		}
		return loc_connManager;
	}
	public Connection getConnection_ffp() throws SQLException{
		Connection conn = null;
        if(dataSource != null){
            conn = dataSource.getConnection();
        }
        return conn;
	}
	
	public static void closeResultSet(ResultSet rs){
		if(rs!=null){
			try {
				rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	public static void closeStatement(Statement stmt){
		if(stmt!=null){
			try {
				stmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	public static void closeConn(Connection conn){
		if(conn!=null){
			try {
				conn.close();//关闭
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	public static void closeAll(ResultSet rs,Statement stmt,Connection conn){
		if(rs!=null){
			try {
				rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		if(stmt!=null){
			try {
				stmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		if(conn!=null){
			try {
				conn.close();//关闭
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	public static void main(String[] a_agrs) throws Exception
	{
//		Properties loc_prop = (Properties) ResourceUtil.getInstance().getResource("ffpdbProperty", ResourceUtil.RESOURCE_PROPERTIES_TYPE);
//		ConnectionManager.registerDatabase(loc_prop);
//		ConnectionManager.setDefaultDatabase("ffp");
//		ConnectionManager.getInstance().getConnection();
		Connection loc_conn = ConnectionManager.getInstance_ffp().getConnection_ffp();
		String sql = "SELECT A.TRANSACTION_ID,A.END_TO_END_ID,B.* FROM tb_tx_jnl A LEFT JOIN tb_tx_p100dat B ON A.JNL_NO = B.JNL_NO ";
		ArrayList<String> list = new ArrayList<>();
		List<Map<String, Object>> listResult = EntityManager.queryMapList(loc_conn, sql);
		System.out.println(listResult.get(0));
		ConnectionManager.closeConn(loc_conn);
		/*
		Properties loc_prop = new Properties();
		loc_prop.put("databaseName", "ffp");
		loc_prop.put("url", "jdbc:MySQL://172.21.21.252:3306/ffp");
		loc_prop.put("driverClassName", "com.mysql.jdbc.Driver");
		loc_prop.put("username", "clous");
		loc_prop.put("password", "123456");
		try
		{
			ConnectionManager.registerDatabase(loc_prop);
			ConnectionManager.setDefaultDatabase("ffp");
			ConnectionManager loc_connMgr = ConnectionManager.getInstance();
			Connection loc_conn = loc_connMgr.getConnection();
			loc_conn.close();
		} catch (Exception ip_ex)
		{
			ip_ex.printStackTrace();
		}

	*/}
	public static Connection getConn() throws Exception{
		Properties loc_prop = new Properties();
		loc_prop.put("databaseName", "ffp");
		loc_prop.put("url", "jdbc:MySQL://172.21.21.198:3306/ffp");
		loc_prop.put("driverClassName", "com.mysql.jdbc.Driver");
		loc_prop.put("username", "clous");
		loc_prop.put("password", "123456");
		loc_prop.put("defaultSchema", "ffp");
		ConnectionManager.registerDatabase(loc_prop);
		ConnectionManager.setDefaultDatabase("ffp");
		return ConnectionManager.getInstance().getConnection();
	}
}
