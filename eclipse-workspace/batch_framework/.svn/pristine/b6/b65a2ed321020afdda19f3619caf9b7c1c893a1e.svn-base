package com.forms.framework;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import org.dom4j.Element;

import com.forms.framework.conf.JobConfiger;
import com.forms.framework.conf.SysConfiger;
import com.forms.framework.ctrl.BatchJobJnl;
import com.forms.framework.ctrl.BreakPoint;
import com.forms.framework.exception.BatchJobException;
import com.forms.framework.log.BatchLogger;
import com.forms.framework.persistence.ConnectionManager;

public abstract class BatchBaseJob
{
	protected String jobName = null;

	protected String actionName = null;

	protected String batchAcDate = null;

	protected SysConfiger sysConfiger = null;

	protected JobConfiger jobConfiger = null;

	protected BatchJobJnl jobJnl = null;

	protected String rerunFlg = null;

	protected BreakPoint rerunBreakPoint = null;

	protected BreakPoint breakPoint = null;

	protected BatchLogger batchLogger = null;

	protected String batchData = null;

	protected String batchIsb = null;

	protected String batchRoot = null;

	protected String batchBackup = null;

	protected String batchFtp = null;

	protected String batchConfInfo = null;

	protected Element actionElement = null;

	public BatchBaseJob()
	{

	}

	public String getJobName()
	{
		return jobName;
	}

	public void setJobName(String ip_a_jobName)
	{
		jobName = ip_a_jobName;
	}

	public String getActionName()
	{
		return actionName;
	}

	public void setActionName(String ip_a_actionName)
	{
		actionName = ip_a_actionName;
	}

	public String getBatchAcDate()
	{
		return batchAcDate;
	}

	public void setBatchAcDate(String ip_a_batchAcDate)
	{
		batchAcDate = ip_a_batchAcDate;
	}

	public SysConfiger getSysConfiger()
	{
		return sysConfiger;
	}

	public void setSysConfiger(SysConfiger ip_a_sysConfiger)
	{
		sysConfiger = ip_a_sysConfiger;
	}

	public JobConfiger getJobConfiger()
	{
		return jobConfiger;
	}

	public void setJobConfiger(JobConfiger ip_a_jobConfiger)
	{
		jobConfiger = ip_a_jobConfiger;
	}

	public BatchJobJnl getJobJnl()
	{
		return jobJnl;
	}

	public void setJobJnl(BatchJobJnl ip_a_jobJnl)
	{
		jobJnl = ip_a_jobJnl;
	}

	public boolean isRerun()
	{
		if (BatchJobConstants.JOB_RERUN_MANDATORY.equals(rerunFlg)
				|| BatchJobConstants.JOB_RERUN_NEEDED.equals(rerunFlg))
		{
			return true;
		}
		return false;
	}

	public boolean isNeedRerun()
	{
		if (BatchJobConstants.JOB_RERUN_NEEDED.equals(rerunFlg))
		{
			return true;
		}
		return false;
	}

	public boolean isMandatoryRerun()
	{
		if (BatchJobConstants.JOB_RERUN_MANDATORY.equals(rerunFlg))
		{
			return true;
		}
		return false;
	}

	public String getRerunFlg()
	{
		return rerunFlg;
	}

	public void setRerunFlg(String ip_a_rerunFlg)
	{
		rerunFlg = ip_a_rerunFlg;
	}

	public BatchLogger getBatchLogger()
	{
		return batchLogger;
	}

	public void setBatchLogger(BatchLogger ip_a_batchLogger)
	{
		batchLogger = ip_a_batchLogger;
	}

	public BreakPoint getRerunBreakPoint()
	{
		return rerunBreakPoint;
	}

	public void setRerunBreakPoint(BreakPoint ip_a_rerunBreakPoint)
	{
		rerunBreakPoint = ip_a_rerunBreakPoint;
	}

	public BreakPoint getBreakPoint()
	{
		return breakPoint;
	}

	public void setBreakPoint(BreakPoint ip_a_breakPoint)
	{
		breakPoint = ip_a_breakPoint;
	}

	protected String getRerunType() throws BatchJobException
	{
		return null;
	}

	public void init() throws BatchJobException
	{
	}

	public boolean check() throws BatchJobException
	{
		return true;
	}

	public abstract boolean execute() throws BatchJobException;

	public boolean close() throws BatchJobException
	{
		return true;
	}

	public String getBatchData()
	{
		return batchData;
	}

	public void setBatchData(String ip_BatchData)
	{
		this.batchData = ip_BatchData;
	}

	public String getBatchIsb()
	{
		return batchIsb;
	}

	public void setBatchIsb(String ip_BatchIsb)
	{
		this.batchIsb = ip_BatchIsb;
	}

	public String getBatchRoot()
	{
		return batchRoot;
	}

	public void setBatchRoot(String ip_BatchRoot)
	{
		this.batchRoot = ip_BatchRoot;
	}

	public String getBatchBackup()
	{
		return batchBackup;
	}

	public void setBatchBackup(String ip_BatchBackup)
	{
		this.batchBackup = ip_BatchBackup;
	}

	public String getBatchFtp()
	{
		return batchFtp;
	}

	public void setBatchFtp(String batchFtp)
	{
		this.batchFtp = batchFtp;
	}

	public String getBatchConfInfo()
	{
		return batchConfInfo;
	}

	public void setBatchConfInfo(String batchConfInfo)
	{
		this.batchConfInfo = batchConfInfo;
	}

	public Element getActionElement()
	{
		return actionElement;
	}

	public void setActionElement(Element actionElement)
	{
		this.actionElement = actionElement;
	}

	protected void execQuery(String sql, Object[] param) throws Exception
	{
		Connection conn = null;
		try
		{
			conn = ConnectionManager.getInstance().getConnection();
			this.execQuery(conn, sql, param);
			conn.commit();
		} catch (Exception e)
		{
			if (conn != null)
			{
				conn.rollback();
			}
			throw e;
		} finally
		{
			if (conn != null)
			{
				conn.close();
			}
		}
	}

	protected void execQuery(Connection conn, String sql, Object[] param)
			throws Exception
	{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try
		{
			stmt = conn.prepareStatement(sql);
			if (param != null)
			{
				for (int i = 0; i < param.length; i++)
				{
					stmt.setObject(i+1, param[i]);
				}
			}
			rs = stmt.executeQuery();
			while (rs.next())
			{
				this.exec(rs);
			}
		} catch (Exception e)
		{
			throw e;
		} finally
		{
			if (rs != null)
			{
				rs.close();
			}
			if (stmt != null)
			{
				stmt.close();
			}
		}
	}

	protected void exec(ResultSet rs) throws Exception
	{
	}

}
