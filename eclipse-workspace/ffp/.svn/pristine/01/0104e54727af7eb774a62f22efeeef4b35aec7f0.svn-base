package com.forms.ffp.bussiness.participant.addressing.ffpadr02;

import java.util.List;

import javax.xml.bind.JAXBElement;

import com.forms.ffp.adaptor.jaxb.iclfps.fps_adrs_003_001_01.AddressingScheme;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_adrs_003_001_01.Agent;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_adrs_003_001_01.ClearingSystemMemberIdentification;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_adrs_003_001_01.Document;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_adrs_003_001_01.FinancialInstitutionIdentification;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_adrs_003_001_01.GroupHeader;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_adrs_003_001_01.MessageRoot;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_adrs_003_001_01.ObjectFactory;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_adrs_003_001_01.ProxyIDType;
import com.forms.ffp.adaptor.jaxb.iclfps.head_001_001_01.BusinessApplicationHeaderV01;
import com.forms.ffp.adaptor.jaxb.iclfps.head_001_001_01.FPSBusinessServiceCode;
import com.forms.ffp.core.define.FFPConstants;
import com.forms.ffp.core.define.FFPConstantsTxJnl;
import com.forms.ffp.core.msg.iclfps.FFPMsgBaseHkiclMessage;
import com.forms.ffp.core.utils.FFPXMLUtils;
import com.forms.ffp.persistents.bean.FFPTxJnlAction;

public class FFPMsgFfpadr02_Fpsadrs003 extends FFPMsgBaseHkiclMessage {

	private ObjectFactory _objFactory = new ObjectFactory();

	private FFPVoFfpadr02 adr02 = null;

	public FFPMsgFfpadr02_Fpsadrs003(FFPVoFfpadr02 adr02) {
		this.adr02 = adr02;
	}

	public JAXBElement<BusinessApplicationHeaderV01> marshalMsgBizDataHead() {
		BusinessApplicationHeaderV01 appHdr = new BusinessApplicationHeaderV01();
		appHdr.setFr(createParty(this.msgFromID));
		appHdr.setTo(createParty(this.msgToID));
		appHdr.setBizMsgIdr(this.msgID);
		appHdr.setMsgDefIdr(this.msgTypeName);
		appHdr.setBizSvc(FPSBusinessServiceCode.fromValue(this.msgBizSvc));
		appHdr.setCreDt(FFPXMLUtils.toGregorianDt(this.creDt));

		return (new com.forms.ffp.adaptor.jaxb.iclfps.head_001_001_01.ObjectFactory()).createAppHdr(appHdr);
	}

	public JAXBElement<?> marshalMsgBizDataDocument() {
		Document loc_doc = createDocument();
		return (new ObjectFactory()).createDocument(loc_doc);
	}

	private Document createDocument() {
		Document doc = _objFactory.createDocument();

		MessageRoot msgRoot = _objFactory.createMessageRoot();
		GroupHeader gh = _objFactory.createGroupHeader();
		gh.setMsgId(this.msgID);
		gh.setCreDtTm(FFPXMLUtils.toGregorianDt(this.creDt));
		msgRoot.setGrpHdr(gh);

		AddressingScheme as = _objFactory.createAddressingScheme();
		as.setAdrReqId(adr02.getJbA100().getAdrReqId());

		Agent agent = new Agent();
		FinancialInstitutionIdentification fi = new FinancialInstitutionIdentification();
		agent.setFinInstnId(fi);
		ClearingSystemMemberIdentification csmi = new ClearingSystemMemberIdentification();
		fi.setClrSysMmbId(csmi);
		csmi.setMmbId(adr02.getJbA100().getClrCd());
		as.setAgt(agent);

		as.setId(adr02.getJbA100().getProxyId());
		as.setTp(ProxyIDType.fromValue(adr02.getJbA100().getProxyIdTp()));

		msgRoot.getAdrSchme().add(as);
		doc.setAdrCxlReq(msgRoot);

		return doc;
	}

	public void getDataFromDB(List<FFPTxJnlAction> actionList) {

		FFPMsgFpsadr004_Ffpamr01REPLY reply = new FFPMsgFpsadr004_Ffpamr01REPLY();
		FFPTxJnlAction action = actionList.get(actionList.size() - 1);
		String status = action.getMsgStatus();
		if (FFPConstantsTxJnl.TX_STATUS.TX_STAT_TMOUT.getStatus().equalsIgnoreCase(status)) {
			// TIME OUT
			reply.setSts("TMOU");
			// reply.setRsnInfCd("timeout");
		} else {
			// APPST or REJECT
			reply.setSts(status);
//			if ("RJCT".equalsIgnoreCase(action.getMsgStatus())) {
//				reply.setRsnInfCd(action.getRejCode());
//			}
		}
		reply.setSrcRefNm(adr02.getJbA100().getSrcRefNm());
		reply.setProxyId(adr02.getJbA100().getProxyId());
		reply.setProxyIdTp(adr02.getJbA100().getProxyIdTp());
		adr02.setReply(reply);
	}

	@Override
	public String getSendType()
	{
		return FFPConstants.SEND_TYPE_REQ;
	}

	@Override
	public String getPriority()
	{
		return FFPConstants.MQ_LEVEL_PRIORITY_MEDIUM;
	}

}
