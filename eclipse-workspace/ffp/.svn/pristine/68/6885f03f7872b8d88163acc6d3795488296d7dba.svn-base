package com.forms.ffp.webapp.testing.service;

import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

import com.forms.ffp.adaptor.define.FFPJaxbConstants;
import com.forms.ffp.adaptor.jaxb.participant.request.BODY;
import com.forms.ffp.adaptor.jaxb.participant.request.ROOT;
import com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.FFPCTI01;
import com.forms.ffp.adaptor.jaxb.participant.request.ffpcti02.FFPCTI02;
import com.forms.ffp.adaptor.jaxb.participant.request.ffpcto01.FFPCTO01;
import com.forms.ffp.adaptor.jaxb.participant.request.ffpddi02.FFPDDI02;
import com.forms.ffp.adaptor.jaxb.participant.request.head.HEAD;
import com.forms.ffp.core.define.FFPConstants;
import com.forms.ffp.core.msg.participant.FFPParticipantMessageConverter;

public class TcpSimulatorThread extends Thread {
	public void run() {
		System.out.println(
				"===================================TCP SIMULATOR START============================================");
		ServerSocket server = null;
		try {
			server = new ServerSocket(18888);
			while (!server.isClosed()) {
				Socket socket = server.accept();
				socket.setSoTimeout(60 * 1000);
				ByteArrayOutputStream result = new ByteArrayOutputStream();
				byte[] lengthByte = new byte[FFPJaxbConstants.JAXB_CONTEXT_PARTICIPANT_LENGTHFIELD_LEN];
				DataInputStream is = new DataInputStream(socket.getInputStream());
				is.readFully(lengthByte);
				result.write(lengthByte, 0, FFPJaxbConstants.JAXB_CONTEXT_PARTICIPANT_LENGTHFIELD_LEN);
				int length = Integer.valueOf(new String(lengthByte, FFPConstants.ENCODING_UTF8));

				byte[] dataByte = new byte[length];
				is.readFully(dataByte);
				result.write(dataByte, 0, length);

				String message = new String(result.toByteArray(), FFPConstants.ENCODING_UTF8);
				ROOT root = FFPParticipantMessageConverter.parseXml2RequestObject(message);
				if (root.getBODY() instanceof FFPCTO01) {
					System.out.println("==========RECEIVE FROM FFP=============start============");
					System.out.println(message);
					System.out.println("==========RECEIVE FROM FFP==============end=============");
				} else {
					String str = returnMessage(root);
					OutputStream os = socket.getOutputStream();
					// //set time out
					// Thread.sleep(10000);
					os.write(str.getBytes("utf-8"));
					os.close();
				}
			}
		} catch (Exception ip_e) {
			ip_e.printStackTrace();
		} finally {
			try {
				server.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private String returnMessage(ROOT root) {
		FileInputStream fis = null;
		String returnMessage = null;
		try {
			HEAD head = root.getHEAD();
			BODY body = root.getBODY();

			String srcRefNm = null;

			if (FFPJaxbConstants.JAXB_MSG_TYPE_FFPCTI01.equals(head.getMessageType())) {
				FFPCTI01 cti01 = (FFPCTI01) body;
				srcRefNm = cti01.getSrcRefNm();
				fis = new FileInputStream("D:/ffp/testing/FFPCTI01.xml");
			} else if (FFPJaxbConstants.JAXB_MSG_TYPE_FFPCTI02.equals(head.getMessageType())) {
				FFPCTI02 cti02 = (FFPCTI02) body;
				srcRefNm = cti02.getSrcRefNm();
				fis = new FileInputStream("D:/ffp/testing/FFPCTI02.xml");
			}else if(FFPJaxbConstants.JAXB_MSG_TYPE_FFPDDI02.equals(head.getMessageType())) {
				FFPDDI02 ddi02 = (FFPDDI02)body;
				srcRefNm = ddi02.getSrcRefNm();
				fis = new FileInputStream("D:/ffp/testing/FFPDDI02.xml");
			}
			// common data
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			byte[] b = new byte[1024];
			int len = 0;
			while (-1 != (len = fis.read(b))) {
				baos.write(b, 0, len);
			}
			returnMessage = new String(baos.toByteArray(), "utf-8");
			returnMessage = returnMessage.replace("#{RequestID}", head.getRequestID());
			returnMessage = returnMessage.replace("#{SrcRefNm}", srcRefNm);

			return returnMessage;
		} catch (Exception ip_e) {
			ip_e.printStackTrace();
			;
			return "";
		} finally {
			try {
				if (fis != null)
					fis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

}
