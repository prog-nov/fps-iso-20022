package com.forms.batch.job.outward;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.forms.ffp.bussiness.participant.ffpcto01.FFPMsgCTO01_MutiPacs008;
import com.forms.ffp.bussiness.participant.ffpcto01.FFPMsgCTO01_Pacs008;
import com.forms.ffp.core.msg.iclfps.FFPMsgBaseHkiclMessage;
import com.forms.ffp.persistents.bean.payment.credittransfer.FFPJbP100;

public class FFPMsgCTO01Pacs008XMLFILEThread implements Runnable {
	private String mode;;
	private FFPJbP100 fb;
	private List<FFPJbP100> multi008List;
	private String multi008FilePath;
	HashMap<String, String> btchMap;

	public void initSingle008Thread(FFPJbP100 fb) {
		this.fb = fb;
		mode = "S";
	}

	public void initMulti008Thread(List<FFPJbP100> multi008List, String multi008FilePath,
			HashMap<String, String> btchMap) {
		this.multi008List = multi008List;
		this.multi008FilePath = multi008FilePath;
		this.btchMap = btchMap;
		mode = "M";
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		System.out.println();
		if ("S".equals(mode)) {
			writeSingle008ToFile();
		} else if ("M".equals(mode)) {
			writeMulti008ToFile();
		}
	}

	private void writeSingle008ToFile() {
		BufferedWriter bw = null;
		try {
			FFPMsgCTO01_Pacs008 single008 = new FFPMsgCTO01_Pacs008(this.fb);
			FFPMsgBaseHkiclMessage messageObj = (FFPMsgBaseHkiclMessage) single008;
			String msg = messageObj.parseHkiclMessage();
			SimpleDateFormat fileNameDateForm = new SimpleDateFormat("yyyyMMdd");
			String fileName = "FPSPCRO" + CreditTransferOutwardBatchFileProcessor.CLEARING_CODE
					+ fileNameDateForm.format(new Date())
					+ String.format("%08d", CreditTransferOutwardBatchFileProcessor.getBatSubSeqNum()) + ".xml";
			bw = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(new File(
							CreditTransferOutwardBatchFileProcessor.BATCH_SUBMISSION_DIRECTORY_PATH + fileName)),
					"UTF-8"));
			bw.write(msg);
			bw.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (bw != null) {
				try {
					bw.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	private void writeMulti008ToFile() {
		BufferedWriter bw = null;
		try {
			FFPMsgCTO01_MutiPacs008 multi008 = new FFPMsgCTO01_MutiPacs008(this.multi008List, this.btchMap);
			String mesText = multi008.parseHkiclMessage();

			bw = new BufferedWriter(
					new OutputStreamWriter(new FileOutputStream(new File(this.multi008FilePath)), "UTF-8"));
			bw.write(mesText);
			bw.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (bw != null) {
				try {
					bw.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

}
