package com.forms.batch.job.unit.participant.credittransfer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.forms.batch.job.unit.participant.message.ffpcto01.FFPBatch_RES_CTO01;
import com.forms.ffp.adaptor.jaxb.iclfps.admi_002_001_01.MessageRejectV01;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_envelope_01.FpsMessageEnvelope;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_envelope_01.ISO20022BusinessDataV01;
import com.forms.ffp.adaptor.jaxb.iclfps.head_001_001_01.BusinessApplicationHeaderV01;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.OriginalGroupHeader71;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.PaymentTransaction801;
import com.forms.ffp.adaptor.jaxb.participant.response.ffpcto01.FFPCTO01;
import com.forms.ffp.core.define.FFPConstants;
import com.forms.ffp.core.define.FFPConstantsServiceCode;
import com.forms.ffp.core.define.FFPConstantsTxJnl;
import com.forms.ffp.core.define.FFPStatus;
import com.forms.ffp.core.exception.FFPTeErrorMsg;
import com.forms.ffp.core.msg.FFPAdaptorMgr;
import com.forms.ffp.core.msg.iclfps.FFPHkiclMessageConverter;
import com.forms.ffp.core.msg.participant.FFPSendTcpMessageResp;
import com.forms.ffp.core.utils.FFPIDUtils;
import com.forms.framework.BatchBaseJob;
import com.forms.framework.exception.BatchJobException;
import com.forms.framework.persistence.ConnectionManager;
import com.forms.framework.persistence.EntityManager;

public class CreditTransferOutwardBatchResponseFileProcessor extends BatchBaseJob {

	public static final Class<CreditTransferOutwardBatchResponseFileProcessor> CLASS_NAME = CreditTransferOutwardBatchResponseFileProcessor.class;
	public static final String ERROR_CODE = FFPTeErrorMsg.getErrorCode(CLASS_NAME, 0);

	private static String OUTWARD_BATCH_RES_FILE_NAME = "";
	private static String LOCAL_FILE_PATH = "";
	private static String FILENAME_PATTERN = "";
	private static final String ADMIN002_NO_REF = "NOREF";

	private static String SEPARATOR = "-----";
	private Connection loc_conn;

	@Override
	public boolean execute() throws BatchJobException {
		process();
		return true;
	}

	@Override
	public void init() throws BatchJobException {
		this.batchLogger.info("init credit transfer outward response config started");
		try {
			// get by args
			LOCAL_FILE_PATH = this.actionElement.element("parameters").element("parameter")
					.elementText("local-file-path");
			FILENAME_PATTERN = this.actionElement.element("parameters").element("parameter")
					.elementText("filename-pattern");

			this.batchLogger
					.info(String.format("Read Parameters From file %s.xml, local-file-path=%s, filename-pattern=%s",
							OUTWARD_BATCH_RES_FILE_NAME, LOCAL_FILE_PATH, FILENAME_PATTERN));
			// get conn
			if (loc_conn == null) {
				loc_conn = ConnectionManager.getInstance().getConnection();
				this.batchLogger.info("Database is connected");
			}
			this.batchLogger.info("init credit transfer outward response config end");
		} catch (Exception e) {
			this.batchLogger.error(e);
		}
	}

	public void process() {
		this.batchLogger.info("Process credit transfer outward batch file start");

		Map<String, List<PaymentTransaction801>> txMap = new HashMap<String, List<PaymentTransaction801>>();
		FFPAdaptorMgr ffpMgr = FFPAdaptorMgr.getInstance();
		try {
			// a.read credit transfer outward batch response file
			List<File> readFiles = readfiles(LOCAL_FILE_PATH);
			if (readFiles == null || readFiles.size() == 0) {
				this.batchLogger.info("the file folder " + LOCAL_FILE_PATH + " is empty ");
				return;
			}

			// b.process file data
			processFile(readFiles, txMap);
			this.batchLogger
					.info("File group status and transaction status check success, then process all transaction data.");

			// c.send response message to FFP agent and update
			processTxData(loc_conn, ffpMgr, txMap);

		} catch (Exception e) {
			this.batchLogger.error("Process credit transfer outward batch file error");
		}
	}

	private void processFile(List<File> readFiles, Map<String, List<PaymentTransaction801>> txMap) {
		this.batchLogger.info("Process credit transfer outward batch files start");

		for (File file : readFiles) {
			try {
				this.batchLogger.info(String.format("Credit Transfer outward batch file[fileName:%s]", file.getName()));
				// b.1 read xml file to string
				String fileString = readFromFile(file);

				// b.2 parse xml string
				FpsMessageEnvelope fpsMsg = FFPHkiclMessageConverter.parseObject(fileString);
				List<ISO20022BusinessDataV01> bizData = fpsMsg.getFpsPylds().getBizData();

				// analyze the BizSvc
				Object appHdr = bizData.get(0).getContent().get(0).getValue();
				String bizSvc = ((BusinessApplicationHeaderV01) appHdr).getBizSvc().toString();

				Object document = bizData.get(0).getContent().get(1).getValue();
				if (document instanceof com.forms.ffp.adaptor.jaxb.iclfps.admi_002_001_01.Document) {
					// admin reject process
					MessageRejectV01 admi00200101 = ((com.forms.ffp.adaptor.jaxb.iclfps.admi_002_001_01.Document) document)
							.getAdmi00200101();
					String adminRef = admi00200101.getRltdRef().getRef();
					String rejCode = admi00200101.getRsn().getRjctgPtyRsn();
					String rejReason = admi00200101.getRsn().getRsnDesc();
					String refFileName = admi00200101.getRsn().getAddtlData();// file
																				// name
																				// of
																				// the
																				// outward
																				// file

					if (ADMIN002_NO_REF.equals(adminRef)) {
						this.batchLogger.info(String.format(
								"The file[FileName:%s] had been reject by FPS with Reject Code[%s] and Reject Reason[%s]",
								refFileName, rejCode, rejReason));
					} else {
						// adminRef = "Original message id"

					}
				} else if (document instanceof com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.Document) {
					com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.Document doc = (com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.Document) document;
					// invalid response file process
					List<PaymentTransaction801> txInfAndSts = doc.getFIToFIPmtStsRpt().getTxInfAndSts();

					// group status of transaction
					OriginalGroupHeader71 rigGrpInf = doc.getFIToFIPmtStsRpt().getOrgnlGrpInfAndSts();
					String grpSts = rigGrpInf.getGrpSts() != null ? rigGrpInf.getGrpSts().value() : null;
					List<String> addInf = rigGrpInf.getStsRsnInf() != null ? rigGrpInf.getStsRsnInf().getAddtlInf()
							: null;
					StringBuilder reason = new StringBuilder();
					if (addInf != null) {
						for (String str : addInf) {
							reason.append(str);
						}
					}
					String grpRejCode = rigGrpInf.getStsRsnInf() != null && rigGrpInf.getStsRsnInf().getRsn() != null
							? rigGrpInf.getStsRsnInf().getRsn().getPrtry() : null;

					if (grpSts != null) {
						if (FFPStatus.GROUP_STATUS.PARTIALLY_ACCEPTED.getCode().equals(grpSts)) {
							// NOT check group status with all tx_status:PART
							this.batchLogger.info(String.format(
									"The credit transfer outward batch response file[%s] group status is : %s",
									file.getName(), grpSts));
						} else {
							// rule1: group status = "RJCT" ,then transaction
							// status must be "RJCT"
							// rule2: group status = "ACSC" ,then transaction
							// status must be "ACSC"
							if (!checkStatus(grpSts, txInfAndSts)) {
								StringBuilder sbd = new StringBuilder(String.format(
										"The credit transfer outward batch response file[%s] group status[%s] not match with all transaction status",
										file.getName(), grpSts));
								if (FFPStatus.GROUP_STATUS.ALL_REJECTED.getCode().equals(grpSts))
									sbd.append(" ")
											.append(String.format(
													"And group reject code = %s, group reject reason = %s", grpRejCode,
													reason.toString()));
								this.batchLogger.info(sbd.toString());

								continue;// when file status not match, skip
											// this one
							}
						}
					}

					// 2c.2 transaction process
					txMap.put(file.getName() + SEPARATOR + bizSvc, txInfAndSts);
				} else {
					this.batchLogger.info(String.format("Error document type of file[FileName:%s]", file.getName()));
					continue;
				}
			} catch (Exception e) {
				e.printStackTrace();
				this.batchLogger.error(String.format("Error on processing the file[fileName:%s]", file.getName()), e);
			}
		}

		this.batchLogger.info("Process credit transfer outward batch files end.");
	}

	public void processTxData(Connection conn, FFPAdaptorMgr ffpMgr, Map<String, List<PaymentTransaction801>> txMap) {
		
		Iterator<String> fileNameIt = txMap.keySet().iterator();
		while(fileNameIt.hasNext())
		{
			String fileName = fileNameIt.next();
			List<PaymentTransaction801> list = txMap.get(fileName);
			String bizSvc = fileName.split(SEPARATOR)[1];
			for(PaymentTransaction801 txInfo : list)
			{
				try
				{
					//3a.get transaction info form FFP database
					String sql_query = "SELECT A.JNL_NO , A.SEQ_NO, A.SRC_REF_NM, B.MSG_ID FROM "
								+ "(SELECT ACTION.JNL_NO, MAX(ACTION.SEQ_NO) SEQ_NO, P100.SRC_REF_NM FROM TB_TX_JNLACTION ACTION JOIN TB_TX_JNL JNL "
								+ "ON ACTION.JNL_NO = JNL.JNL_NO JOIN TB_TX_P100DAT P100 ON P100.JNL_NO = JNL.JNL_NO "
								+ "WHERE JNL.TRANSACTION_ID = ? AND JNL.END_TO_END_ID = ? GROUP BY ACTION.JNL_NO, p100.SRC_REF_NM) A JOIN "
								+ "(SELECT JNL_NO, MSG_ID FROM TB_TX_JNLACTION GROUP BY JNL_NO, MSG_ID HAVING MIN(SEQ_NO) =1 ) B "
								+ "ON A.JNL_NO = B.JNL_NO ";
					List<Object> listData = new ArrayList<Object>();
					listData.add(txInfo.getOrgnlTxId());
					listData.add(txInfo.getOrgnlEndToEndId());
						
					List<Map<String, Object>> result = EntityManager.queryMapList(conn, sql_query, listData.toArray());
					if(result == null || result.size() < 1)
					{
						this.batchLogger.info(String.format("FFP can not find the transaction info with TX_ID[%s] and END_TO_END_ID[%s]", txInfo.getOrgnlTxId(), txInfo.getOrgnlEndToEndId()));
						continue;
					}
					
					Map<String, Object> map = result.get(0);//just one result
					String jnlNo = (String)map.get("JNL_NO");
					int seqNo = (int)map.get("SEQ_NO");
					String srcRefNo = (String)map.get("SRC_REF_NM");
					String relateReqRefNo = (String)map.get("MSG_ID");
					String responseMsgId = FFPIDUtils.getRefno();	
					StringBuilder rsn = new StringBuilder();
					if(txInfo.getStsRsnInf() != null)
					{
						List<String> reasonList = txInfo.getStsRsnInf().getAddtlInf();
						for(String str : reasonList)
						{
							rsn.append(str);
						}
					}
					
					
					if(bizSvc.equals(FFPConstantsServiceCode.ICLFPS_SERVICECODE_PAYR01)){
						//// update tb_tx_jnl
						String sql_update = "UPDATE TB_TX_JNL SET TX_STAT WHERE JNL_NO = ?";
						List<Object> update = new ArrayList<Object>();
						update.add(jnlNo);
						EntityManager.update(conn, sql_update, list.toArray());
						
					} else {
						String rejCode = txInfo.getStsRsnInf() != null && txInfo.getStsRsnInf().getRsn() != null ? txInfo.getStsRsnInf().getRsn().getPrtry() : null;
						FFPSendTcpMessageResp resMsg = generateResMsg( relateReqRefNo, responseMsgId, srcRefNo, txInfo.getOrgnlTxId(), txInfo.getTxSts().value(), rejCode, rsn.toString(), ffpMgr);
						this.batchLogger.info(String.format("FFP to Agent response message: %s", resMsg));
						if(resMsg == null)
						{
							continue;
						}
						
						//3b.Add record for action flow
						String sql_insert = "INSERT INTO TB_TX_JNLACTION (JNL_NO,MSG_ID,MSG_FROM_TYPE,MSG_FROM,MSG_TO_TYPE,MSG_TO,MSG_TYPE,MSG_STATUS,MSG_CREAT_DATE,MSG_PROCE_DATE,MSG_COMPL_DATE) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
						List<Object> insertData = new ArrayList<Object>();
						insertData.add(jnlNo);
						//insertData.add(Integer.valueOf(seqNo) + 1);
						insertData.add(responseMsgId);
						insertData.add(FFPConstants.MSG_TYPE_FFP);//MSG_FROM_TYPE
						insertData.add(FFPConstants.MSG_CODE_FFP);//MSG_FROM
						insertData.add(FFPConstants.MSG_TYPE_AGENT);//MSG_TO_TYPE
						insertData.add(FFPConstants.MSG_CODE_AGENT);//MSG_TO
						insertData.add("FFPCTO01");//MSG_TYPE
						insertData.add(FFPConstantsTxJnl.MSG_STAT_PROCE);//MSG_STATUS
						insertData.add(new java.sql.Timestamp(new Date().getTime()));//CREATE_TIME
						insertData.add(new java.sql.Timestamp(new Date().getTime()));//PROCESS_TIME
						insertData.add(null);//COMPELE_TIME
						EntityManager.update(conn, sql_insert, insertData.toArray());
						
						//3c.send message to FFP Agent
						String ack = resMsg.getRespMessage();
						//retry?
						
						//3d.update status of FFP
						String sql_update = "UPDATE TB_TX_JNL JNL JOIN TB_TX_P100DAT P100 ON JNL.JNL_NO = P100.JNL_NO JOIN TB_TX_JINACTION ACTION ON " + 
											"P100.JNL_NO = ACTION.JNL_NO SET JNL.TX_STAT = ?, ACTION.MSG_STATUS = ?, ACTION.MSG_COMPL_DATE = ?, " + 
											"JNL.LAST_UPDATE_TS = ?, ACTION.REJ_CODE = ?, ACTION.REJ_REASON = ? " +
											"WHERE JNL.TRANSACTION_ID = ? AND JNL.END_TO_END_ID = ? ADN JNL.TX_STAT = ? AND P100.SRC_REF_NM = ? AND ACTION.MSG_ID = ?";
						List<Object> update = new ArrayList<Object>();
						if(ack != null && !ack.equals(""))
						{
							update.add(FFPConstantsTxJnl.TX_STAT_COMPL);
							update.add(FFPConstantsTxJnl.MSG_STAT_COMPL);
							update.add(new java.sql.Timestamp(new Date().getTime()));
						}
						else
						{
							//time out
							update.add(FFPConstantsTxJnl.TX_STAT_TMOUT);
							update.add(FFPConstantsTxJnl.MSG_STAT_TMOUT);
							update.add(null);
						}
						update.add(new java.sql.Timestamp(new Date().getTime()));
						//update.add(txInfo.getTxSts().value().equals("ACSC") ? FFPStatus.P100_STATUS.SUCESS.getCode() : FFPStatus.P100_STATUS.REJECT.getCode());
						update.add(rejCode);
						update.add(rsn.toString());
						update.add(txInfo.getOrgnlTxId());
						update.add(txInfo.getOrgnlEndToEndId());
						update.add(FFPConstantsTxJnl.TX_STAT_APPST);//when re-run,
						update.add(srcRefNo);
						update.add(responseMsgId);
						EntityManager.update(conn, sql_update, list.toArray());
					}
					
					
				}catch(Exception ex)
				{
					ex.printStackTrace();
					try {
						loc_conn.rollback();
					} catch (SQLException e) {
						e.printStackTrace();
					}
					this.batchLogger.error(String.format("Error on sending message with tx_info[tx_id:%s] in file[file_name:%s]", txInfo.getOrgnlTxId(), fileName), ex);
				}
			}
		}
		
	}

	private FFPSendTcpMessageResp generateResMsg(String relateReqRefNo, String responseMsgId, String srcRefNo,
			String txId, String status, String rejCode, String rejRsn, FFPAdaptorMgr ffpMgr) {
		FFPCTO01 ffpcto01 = new FFPCTO01();
		ffpcto01.setFFPTransactionId(txId);
		ffpcto01.setRejCd(rejCode);
		ffpcto01.setRejMsg(rejRsn);
		ffpcto01.setRsltCd("");
		ffpcto01.setSrcRefNm(srcRefNo);
		FFPBatch_RES_CTO01 res_cto01 = new FFPBatch_RES_CTO01(relateReqRefNo, responseMsgId, ffpcto01);
		FFPSendTcpMessageResp resp = null;
		try {
			resp = (FFPSendTcpMessageResp) ffpMgr.execute(res_cto01);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resp;
	}

	private boolean checkStatus(String groupSts, List<PaymentTransaction801> txInfAndSts) {
		boolean allStsValid = true;
		for (PaymentTransaction801 payTx : txInfAndSts) {
			if (payTx.getTxSts().value().compareTo(groupSts) != 0) {
				allStsValid = false;
				break;
			}
		}

		return allStsValid;
	}

	public String readFromFile(File file) {
		BufferedReader bufferedReader = null;
		StringBuilder stringBuilder = new StringBuilder();
		try {
			bufferedReader = new BufferedReader(new FileReader(file));
			String content;
			while ((content = bufferedReader.readLine()) != null) {
				stringBuilder.append(content);
			}

		} catch (IOException ex) {
			this.batchLogger.error(String.format("Read file[%s] has error ! Because of " + ex, file.getName()));
		} finally {
			try {
				if (bufferedReader != null)
					bufferedReader.close();
			} catch (IOException ex) {
				this.batchLogger.error("Error on closing bufferedReader Stream!");
			}
		}
		return stringBuilder.toString();
	}

	public List<File> readfiles(String filePath) {
		File file = new File(filePath);
		List<File> list = new ArrayList<File>();
		File[] files = file.listFiles(new FileFilter() {

			@Override
			public boolean accept(File subFile) {
				String subFileName = subFile.getName();
				Pattern pattern = Pattern.compile(FILENAME_PATTERN);
				Matcher m = pattern.matcher(subFileName);
				return m.matches();

			}
		});

		for (File f : files) {
			list.add(f);
		}

		return list;
	}
}
