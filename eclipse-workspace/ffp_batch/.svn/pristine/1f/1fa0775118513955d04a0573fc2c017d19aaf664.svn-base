package com.forms.batch.job.unit.participant.directdebit;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.xml.bind.JAXBElement;

import com.forms.ffp.adaptor.jaxb.iclfps.fps_envelope_01.FpsMessageEnvelope;
import com.forms.ffp.adaptor.jaxb.iclfps.head_001_001_01.BusinessApplicationHeaderV01;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.Document;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.FIToFIPaymentStatusReportV08;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.PaymentTransaction801;
import com.forms.ffp.core.msg.iclfps.FFPHkiclMessageConverter;
import com.forms.framework.BatchBaseJob;
import com.forms.framework.exception.BatchJobException;
import com.forms.framework.persistence.ConnectionManager;
import com.forms.framework.persistence.EntityManager;

public class FileFPSPDDRReader extends BatchBaseJob {
	private static String PACS_002_MESSAGE_IDENTIFIER = "pacs.002.001.08";
	private static Connection conn = null;

	public void init() throws BatchJobException {
		// TODO Auto-generated method stub
	}

	@Override
	public boolean execute() throws BatchJobException {
		// TODO Auto-generated method stub
		try {
			String responseFilePath = this.batchData;

			HashMap<String, String> msgsMap = getMsgsFromFile(responseFilePath);

			if (msgsMap != null) {
				conn = ConnectionManager.getInstance().getConnection();
				Iterator<Entry<String, String>> it = msgsMap.entrySet().iterator();
				while (it.hasNext()) {
					Map.Entry<String, String> entry = (Map.Entry<String, String>) it.next();
					storeMsgToDB(entry.getKey(), entry.getValue());
				}
			} else {
				throw new Exception("No Message Data Is Found!");
			}
			if (conn != null) {
				conn.close();
			}
			return true;
		} catch (Exception e) {
			this.batchLogger.error(e.getMessage());
			return false;
		}
	}

	// get content of the message files
	private HashMap<String, String> getMsgsFromFile(String dirPath) {
		HashMap<String, String> msgsMap = new HashMap<>();

		ArrayList<String> resFiles = getDirectoryFile(dirPath);
		for (int i = 0; i < resFiles.size(); i++) {
			String absolutePath = resFiles.get(i);
			String[] realPathArr = absolutePath.split("\\\\");
			String fileName = realPathArr[realPathArr.length - 1];
			if (fileName.matches("^FPSPDDR[0-9]{19}\\.xml$")) {
				String content = readLineFromFile(absolutePath);
				msgsMap.put(fileName, content);
			}
		}

		return msgsMap;
	}

	// get files list from specified directory
	public ArrayList<String> getDirectoryFile(String dirPath) {
		ArrayList<String> retFiles = new ArrayList<>();
		File dir = new File(dirPath);

		if (dir.exists()) {
			File[] cFiles = dir.listFiles();
			for (File f : cFiles) {
				if (f.isDirectory()) {
					retFiles.addAll(getDirectoryFile(f.getAbsolutePath()));
				} else {
					retFiles.add(f.getAbsolutePath());
					this.batchLogger.info(String.format("The File %s Is Found", f.getAbsolutePath()));
				}
			}
		}

		return retFiles;
	}

	public String readLineFromFile(String file) {
		this.batchLogger.info(String.format("Start To Read File: %s", file));
		BufferedReader br = null;
		StringBuffer strBuf = new StringBuffer();

		try {
			br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(file)), "UTF-8"));
			String content = "";
			while ((content = br.readLine()) != null) {
				strBuf.append(content);
			}
			this.batchLogger.info(String.format("Finish Reading File: %s", file));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			this.batchLogger.error(e.getMessage());
		} finally {
			try {
				if (br != null) {
					br.close();
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				this.batchLogger.error(e.getMessage());
			}
		}

		return strBuf.toString();
	}

	// store msg to DB
	private void storeMsgToDB(String fileName, String content) {
		try {
			FpsMessageEnvelope fpsMsg = FFPHkiclMessageConverter.parseObject(content);

			List<JAXBElement<?>> jaxbElems = fpsMsg.getFpsPylds().getBizData().get(0).getContent();
			BusinessApplicationHeaderV01 header = (BusinessApplicationHeaderV01) jaxbElems.get(0).getValue();
			Object document = jaxbElems.get(1).getValue();
			if (PACS_002_MESSAGE_IDENTIFIER.equals(header.getMsgDefIdr().toLowerCase())) {

				FIToFIPaymentStatusReportV08 fitofipmtstsrpt = ((Document) document).getFIToFIPmtStsRpt();

				// insert into tb_tx_res_fpspddr_temp
				this.batchLogger
						.info(String.format("Start To Insert Into tb_tx_res_fpspddr_temp, FILE_NAME = %s ", fileName));
				String insert_tb_tx_fpspddr_sql = "INSERT INTO tb_tx_res_fpspddr_temp(FILE_NAME, `STATUS`, `FROM`, `TO`, BIZ_MSG_IDR, MSG_DEF_IDR, BIZ_SVC, CRE_DT, MSG_ID, CRE_DT_TM, ORGNL_MSG_ID, ORGNL_MSG_NM_ID, ORGNL_END_TO_END_ID, ORGNL_TX_ID, TXSTS, RSN, ADDITIONAL_INF) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				conn.setAutoCommit(false);
				this.batchLogger.info("Database Transaction Open");

				ArrayList<Object> fpspddr_insert_list = new ArrayList<>();
				fpspddr_insert_list.add((fileName.split("\\."))[0]);
				fpspddr_insert_list.add("I");
				fpspddr_insert_list.add(header.getFr().getFIId().getFinInstnId().getClrSysMmbId().getMmbId());
				fpspddr_insert_list.add(header.getTo().getFIId().getFinInstnId().getClrSysMmbId().getMmbId());
				fpspddr_insert_list.add(header.getBizMsgIdr());
				fpspddr_insert_list.add(header.getMsgDefIdr());
				fpspddr_insert_list.add(header.getBizSvc().value());
				fpspddr_insert_list.add(header.getCreDt().toString());

				fpspddr_insert_list.add(fitofipmtstsrpt.getGrpHdr().getMsgId());
				fpspddr_insert_list.add(fitofipmtstsrpt.getGrpHdr().getCreDtTm().toString());
				fpspddr_insert_list.add(fitofipmtstsrpt.getOrgnlGrpInfAndSts().getOrgnlMsgId());
				fpspddr_insert_list.add(fitofipmtstsrpt.getOrgnlGrpInfAndSts().getOrgnlMsgNmId());

				PaymentTransaction801 pt801 = fitofipmtstsrpt.getTxInfAndSts().get(0);
				fpspddr_insert_list.add(pt801.getOrgnlEndToEndId());
				fpspddr_insert_list.add(pt801.getOrgnlTxId());

				fpspddr_insert_list.add(pt801.getTxSts().value());

				if (pt801.getTxSts().value().equals("RJCT") && pt801.getStsRsnInf() != null) {

					if (pt801.getStsRsnInf().getRsn() != null && pt801.getStsRsnInf().getRsn().getPrtry() != null) {
						fpspddr_insert_list.add(pt801.getStsRsnInf().getRsn().getPrtry());
					} else {
						fpspddr_insert_list.add("");
					}

					if (pt801.getStsRsnInf().getAddtlInf() != null) {
						List<String> addtlInfList = pt801.getStsRsnInf().getAddtlInf();
						StringBuffer addtlInfStrBuf = new StringBuffer();
						for (int i = 0; i < addtlInfList.size(); i++) {
							addtlInfStrBuf.append(addtlInfList.get(i));
						}
						fpspddr_insert_list.add(addtlInfStrBuf.toString());
					} else {
						fpspddr_insert_list.add("");
					}

				} else {
					
					fpspddr_insert_list.add("");
					fpspddr_insert_list.add("");
					
				}

				EntityManager.update(conn, insert_tb_tx_fpspddr_sql, fpspddr_insert_list.toArray());

				conn.commit();
				this.batchLogger.info("Database Transaction Commit");
				this.batchLogger
						.info(String.format("Finish Inserting Into tb_tx_res_fpspddr_temp, FILE_NAME = %s ", fileName));
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			this.batchLogger.error(e.getMessage());
		}
	};

}
