package com.forms.batch.job.unit.iclfps.payment;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.forms.ffp.adaptor.jaxb.participant.request.ROOT;
import com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.FFPCTI01;
import com.forms.ffp.adaptor.jaxb.participant.request.head.HEAD;
import com.forms.ffp.core.define.FFPConstants;
import com.forms.ffp.core.define.FFPConstantsTxJnl;
import com.forms.ffp.core.define.FFPStatus;
import com.forms.ffp.core.exception.FFPSystemException;
import com.forms.ffp.core.msg.FFPAdaptorMgr;
import com.forms.ffp.core.msg.participant.FFPTcpParticipantMessageConverter;
import com.forms.ffp.core.msg.participant.busi.FFP_CTI01_OVO;
import com.forms.ffp.core.utils.FFPDateUtils;
import com.forms.ffp.core.utils.FFPIDUtils;
import com.forms.ffp.persistents.bean.FFPTxJnl;
import com.forms.ffp.persistents.bean.payment.credittransfer.FFPJbP100;
import com.forms.framework.BatchBaseJob;
import com.forms.framework.exception.BatchJobException;
import com.forms.framework.log.BatchLogger;
import com.forms.framework.persistence.ConnectionManager;
import com.forms.framework.persistence.EntityManager;

public class PaymentConfirmationInwardProcessor extends BatchBaseJob
{
	private BatchLogger _logger = BatchLogger.getLogger(this.jobName, this.actionName, PaymentConfirmationInwardProcessor.class);
	private static SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
	
	public void init()
	{
		
	}
	
	@Override
	public boolean execute() throws BatchJobException
	{
		try
		{
			this.processor();
			return true;
		}
		catch(Exception ip_e)
		{
			throw new BatchJobException(ip_e);
		}
	}
	
	private void processor() throws Exception
	{
		_logger.info("Started processor inward batch file data");
		
		//List<com.forms.ffp.adaptor.jaxb.iclfps.pacs_008_001_06.Document> pacs008list = new ArrayList<com.forms.ffp.adaptor.jaxb.iclfps.pacs_008_001_06.Document>();
		FFPAdaptorMgr ffpMgr = FFPAdaptorMgr.getInstance();
		Connection con = null;
		
		try
		{
			//Get FFP Batch DB configuration, DB manager
			con = ConnectionManager.getInstance().getConnection();
			
			//check FFP Agent status, CUT OFF/ON
			
			//1.Get batch file data
			List<FFPJbP100> FFPJbP100List = getTempData(con);
			//2.persistent inward credit transfer data
			processTxData(con, FFPJbP100List, ffpMgr);
			
			_logger.info("Ended processor inward batch file data");
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			_logger.error("Process inward file error", ex);
			throw new BatchJobException(ex);
		}
		finally
		{
			//close connection
			if(con != null)
				con.close();
		}
	}
	
	private void processTxData(Connection conn, List<FFPJbP100> FFPJbP100List, FFPAdaptorMgr ffpMgr)
	{
		_logger.info("Start to process inward credit transfer transaction data.");
		skipTx:for(FFPJbP100 singleP100Info : FFPJbP100List)
		{
			try
			{
				String ffpJnlNo = FFPIDUtils.getJnlNo();
				//3a.persistent inward credit transfer data to transaction table
				savePacs008Data(conn, singleP100Info, ffpJnlNo);
				
				FFP_CTI01_OVO reply = null;
				//retry three times for FFP Agent response
				int retryCount = 0;
				//3b.Send data to Participant----Synchronous
				while(retryCount++ < 3)
				{
					try
					{
						String reqRefNo = FFPIDUtils.getRefno();
						String ffpRequestMessage = generateMsgToAgent(ffpJnlNo, singleP100Info, reqRefNo);
						_logger.info(String.format("FFP to Agent request message: %s", ffpRequestMessage));
						if(ffpRequestMessage == null)
						{
							continue skipTx;//Can't generate message,then skip this one
						}
						
						//Insert tx_jnlAction, if retry it, the reqRefNo will change, so use merge into
						updOrInstAction(conn, ffpJnlNo, reqRefNo, null);
						//send message
						reply = ffpMgr.sendTcpMsg(ffpRequestMessage);//send list message?
						
						if(reply != null)
						{
							break;
						}
					}
					catch(Exception ex)
					{
						_logger.info(String.format("Call FFP Agent fail.[%s]. Retry count[%s]", ex.toString(), retryCount));
					}
				}
				
				//3c.Synchronously update FFP DB status according to the response message
				if(reply != null)
				{
					//a.update tb_tx_jnl status = COMP/REJECT according to result code
					//b.update tb_tx_jnlaction status = MSYNC
					String resultSts = "S".equals(reply.getRsltCd()) ? FFPConstantsTxJnl.TX_STATUS.TX_STAT_COMPL.getStatus() : FFPConstantsTxJnl.TX_STATUS.TX_STAT_REJCT.getStatus();
					_logger.info(String.format("Update FFP Transaction Final status[%s] and Action status[%s] with Credit Transfer Status[%s] and Source Reference number[%s]", 
									resultSts, FFPConstantsTxJnl.MSG_STATUS.MSG_STAT_MSYNC.getStatus(), reply.getRsltCd(), reply.getSrcRefNm()));
					updateResultSts(conn, resultSts, FFPConstantsTxJnl.MSG_STATUS.MSG_STAT_MSYNC.getStatus(), new Date(), ffpJnlNo);
					//_logger.info(String.format("Update FFP credit transfer status from FFP Agent with source reference number[%s]", reply.getSrcRefNm()));
					
					//c.Insert action flow
					insertAcitonFlow(conn, ffpJnlNo, 2, reply.getResposneRefNo(), reply.getRejCd(), reply.getRejMsg());
				}
				else
				{
					//a.update tb_tx_jnl status = TMOUT
					//b.update tb_tx_jnlaction status = Timeout
					_logger.info(String.format("Update FFP Transaction Final status[%s] and Action status[%s] with Source Reference number[%s]", 
							FFPConstantsTxJnl.TX_STATUS.TX_STAT_TMOUT, FFPConstantsTxJnl.MSG_STATUS.MSG_STAT_MSYNC.getStatus(), singleP100Info.getSrcRefNm()));
					updateResultSts(conn, FFPConstantsTxJnl.TX_STATUS.TX_STAT_TMOUT.getStatus(), FFPConstantsTxJnl.MSG_STATUS.MSG_STAT_MSYNC.getStatus(), null, ffpJnlNo);
					//_logger.info(String.format("Update FFP credit transfer status not with response message from Agent by FFP tx_jnl[%s]", ffpJnlNo));
				}
			}
			catch(Exception ex)
			{
				ex.printStackTrace();
				_logger.error(String.format("Error on processing transaction data[TX_ID:%s]", singleP100Info.getTxJnl().getTransactionId()), ex);
			}
		}
		
		_logger.info("End to process inward credit transfer transaction data.");
	}
	
	private void updOrInstAction(Connection conn, String jnlNo, String msgId, Date compDate) throws BatchJobException
	{
		//MERGE INTO USING FOR ORACLE
		try
		{
			//String sql = "MERGE INTO TB_TX_JNLACTION TAR_ACTION"
			//		+ "USING (SELECT * FROM TB_TX_JNLACTION WHERE JNL_NO = ? ) AS ORG_ACTION "
			//		+ "ON TAR_ACTION.MSG_ID = ORG_ACTION.MSG_ID "
			//		+ "WHEN MATCHED THEN UPDATE SET TAR_ACTION.MSG_ID = ? "
			//		+ "WHEN NOT MATCHED THEN INSERT(JNL_NO, SEQ_NO, MSG_ID, MSG_FROM_TYPE, MSG_FROM, MSG_TO_TYPE, MSG_TO, "
			//		+ "MSG_TYPE, MSG_STATUS, REJ_CODE, REJ_RSN, MSG_CREAT_DATE, MSG_PROCE_DATE, MSG_COMPL_DATE) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?) ";
			
			String sql = "INSERT INTO TB_TX_JNLACTION(JNL_NO, SEQ_NO, MSG_ID, MSG_FROM_TYPE, MSG_FROM, MSG_TO_TYPE, MSG_TO, "
					+ "MSG_TYPE, MSG_STATUS, REJ_CODE, REJ_RSN, MSG_CREAT_DATE, MSG_PROCE_DATE, MSG_COMPL_DATE) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?) "
					+ "ON DUPLICATE KEY "
					+ "UPDATE MSG_ID = ? ";
			
			List<Object> list = new ArrayList<Object>();
			//list.add(jnlNo);
			//list.add(msgId);
			list.add(jnlNo);
			list.add(1);//FIRST SEQ_NO
			list.add(msgId);
			list.add(FFPConstants.MSG_TYPE_FFP);//MSG_FROM_TYPE
			list.add(FFPConstants.MSG_CODE_FFP);//MSG_FROM
			list.add(FFPConstants.MSG_TYPE_AGENT);//MSG_TO_TYPE
			list.add(FFPConstants.MSG_CODE_AGENT);//MSG_TO
			list.add("FFPCTI01");//MSG_TYPE
			list.add(FFPConstantsTxJnl.MSG_STATUS.MSG_STAT_CREAT);//MSG_STATUS
			list.add(null);//REJ_CODE
			list.add(null);//REJ_REASON
			list.add(new java.sql.Timestamp(new Date().getTime()));//CREATE_TIME
			list.add(new java.sql.Timestamp(new Date().getTime()));//PROCESS_TIME
			list.add(compDate);//COMPELE_TIME
			list.add(msgId);
			
			EntityManager.update(conn, sql, list.toArray());
		}
		catch(Exception e)
		{
			e.printStackTrace();
			_logger.error("Error on updating action flow", e);
			throw new BatchJobException(e);
		}
	}
	
	private void insertAcitonFlow(Connection conn, String jnlNo, int seq, String msgId, String rejCode, String rejReason) throws BatchJobException
	{
		String sql = "INSERT INTO TB_TX_JNACTION VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		try
		{
			List<Object> list = new ArrayList<Object>();
			list.add(jnlNo);
			list.add(seq);
			list.add(msgId);
			list.add(FFPConstants.MSG_TYPE_AGENT);//MSG_FROM_TYPE
			list.add(FFPConstants.MSG_CODE_AGENT);//MSG_FROM
			list.add(FFPConstants.MSG_TYPE_FFP);//MSG_TO_TYPE
			list.add(FFPConstants.MSG_CODE_FFP);//MSG_TO
			list.add("FFPCTI01");//MSG_TYPE
			list.add(FFPConstantsTxJnl.MSG_STATUS.MSG_STAT_MSYNC.getStatus());//MSG_STATUS
			list.add(rejCode);//REJ_CODE
			list.add(rejReason);//REJ_REASON
			list.add(new java.sql.Timestamp(new Date().getTime()));//CREATE_TIME
			list.add(new java.sql.Timestamp(new Date().getTime()));//PROCESS_TIME
			list.add(new java.sql.Timestamp(new Date().getTime()));//COMPELE_TIME
			
			EntityManager.update(conn, sql, list.toArray());
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			_logger.error("Error on adding action flow", ex);
			throw new BatchJobException(ex);
		}
	}
	
	private void updateResultSts(Connection conn, String tx_status, String action_status, Date compDate, String jnlNo) throws BatchJobException
	{
		//String sql = "UPDATE TB_TX_JNL SET TX_STAT = ?, LAST_UPDATE_TS = ? WHERE JNL_NO = ?";
		//String sql = "UPDATE TB_TX_JNL JNL JOIN TB_TX_P100DAT P100 "	+ 
		//			 "ON JNL.JNL_NO = P100.JNL_NO " + 
		//			 "SET JNL.TX_STAT = ?, JNL.LAST_UPDATE_TS = ? , P100.STATUS = ?, P100.REJ_CODE = ?, P100.REJ_REASON = ? " + 
		//			 "WHERE P100.SRC_REF_NM = ?";
		String sql = "UPDATE TB_TX_JNL JNL JOIN TB_TX_JNLACTION ACTION "	+ 
				 "ON JNL.JNL_NO = ACTION.JNL_NO " + 
				 "SET JNL.TX_STAT = ?, JNL.LAST_UPDATE_TS = ?, ACTION.STATUS = ?, ACTION.MSG_COMPL_DATE = ? " + 
				 "WHERE JNL.JNL_NO = ?";
		try
		{
			List<Object> list = new ArrayList<Object>();
			list.add(tx_status);
			list.add(new java.sql.Timestamp(new Date().getTime()));
			list.add(action_status);
			list.add(compDate == null ? null : new java.sql.Timestamp(compDate.getTime()));
			list.add(jnlNo);
			EntityManager.update(conn, sql, list.toArray());
		}
		catch(Exception ex)
		{
			_logger.error(String.format("Update TX_STATUS[%s] and ACTION_STATUS[%s] with JNL_NO[%s] failed", tx_status, action_status, jnlNo), ex);
			ex.printStackTrace();
			throw new BatchJobException(ex);
		}
	}
	
	//query pacs008 data form temp table, according to batch_id for each batch times
	private List<FFPJbP100> getTempData(Connection con) throws FFPSystemException, Exception
	{
		String sql = "SELECT * FROM TB_BH_INWARD_FPSPYCI WHERE MSG_INST_DATE = ? AND STATUS = ?";
		PreparedStatement pstm = null;
		ResultSet rs = null;
		List<FFPJbP100> list = new ArrayList<FFPJbP100>();
		try
		{
			pstm = con.prepareStatement(sql);
			pstm.setDate(1, new java.sql.Date(format1.parse(this.batchAcDate).getTime()));
			pstm.setString(2, FFPStatus.TEMP_CREDIT_STATUS.INWARD_INITATE.getCode());
			
			rs = pstm.executeQuery();
			while(rs.next())
			{
				FFPJbP100 ctInfo = new FFPJbP100();
				FFPTxJnl txJnl = new FFPTxJnl();
				txJnl.setTransactionId(rs.getString("TRANSACTION_ID"));
				txJnl.setEndToEndId(rs.getString("END_TO_END_ID"));
				
				ctInfo.setTxJnl(txJnl);
				ctInfo.setSrcRefNm(rs.getString("ID"));//just use this field to save temporary id
				ctInfo.setPymtCatPrps(rs.getString("CATEGORY_PURPOSE"));
				ctInfo.setAccountVerification(rs.getString("ACCT_VERF"));
				ctInfo.setSettlementAmount(new BigDecimal(rs.getString("SETTLEMENT_AMT")));
				ctInfo.setSettlementCurrency(rs.getString("SETTLEMENT_CUR"));
				ctInfo.setSettlementDate(rs.getDate("SETTLEMENT_DATE"));
				ctInfo.setInstructedCurrency(rs.getString("INSTRUCTED_CUR"));
				ctInfo.setInstructedAmount(rs.getString("INSTRUCTED_AMT") != null ? new BigDecimal(rs.getString("INSTRUCTED_AMT")) : null);
				ctInfo.setChargersAgentId(rs.getString("CHG_AGT_ID"));
				ctInfo.setChargersAgentBic(rs.getString("CHG_AGT_BIC"));
				ctInfo.setChargersCurrency(rs.getString("CHG_CUR"));
				ctInfo.setChargersAmount(rs.getString("CHG_AMT") != null ? new BigDecimal(rs.getString("CHG_AMT")) : null);
				ctInfo.setDebtorName(rs.getString("DEBTOR_NAME"));
				ctInfo.setDebtorAccountNumber(rs.getString("DEBTOR_ACCTNO"));
				ctInfo.setDebtorAccountNumberType(rs.getString("DEBTOR_ACCTNO_TYPE"));
				ctInfo.setDebtorAgentId(rs.getString("DEBTOR_AGT_ID"));
				ctInfo.setDebtorAgentBic(rs.getString("DEBTOR_AGT_BIC"));
				ctInfo.setCreditorName(rs.getString("CREDITOR_NAME"));
				ctInfo.setCreditorAccountNumber(rs.getString("CREDITOR_ACCTNO"));
				ctInfo.setCreditorAccountNumberType(rs.getString("CREDITOR_ACCTNO_TYPE"));
				ctInfo.setCreditorAgentId(rs.getString("CREDITOR_AGT_ID"));
				ctInfo.setCreditorAgentBic(rs.getString("CREDITOR_AGT_BIC"));
				ctInfo.setPaymentPurposeType(rs.getString("PURPOSE_TYPE"));
				ctInfo.setPaymentPurposeCd(rs.getString("PURPOSE_CODE"));
				ctInfo.setPaymentPurposeProprietary(rs.getString("PURPOSE_OTHER"));
				ctInfo.setRemittanceInformation(rs.getString("REMIT_INFO"));
				ctInfo.setSrvcMode(rs.getString("BIZ_SVC_TYPE"));
				
				list.add(ctInfo);
			}
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			_logger.error(String.format("Failed to get file data from temporary table with batchDate[%s]", this.batchAcDate), ex);
			//throw new FFPDBException(String.format("Failed to get file data from temporary table with batchId[%s]", batchId), ex);
			throw new BatchJobException(ex);
		}
		finally
		{
			if(rs != null) rs.close();
			if(pstm != null) pstm.close();
		}
		return list;
	}
	
	private String generateMsgToAgent(String jnl_no, FFPJbP100 txInfo, String reqRefNo)
	{
		String message = null;
		ROOT root = new ROOT();
			
		HEAD head = new HEAD();
			
		head.setRequestID(FFPConstants.MSG_CODE_FFP);//28
		head.setTransactionDate(FFPDateUtils.getDateStr(new Date(), FFPDateUtils.INT_DATE_FORMAT));
		head.setTransactionTime(FFPDateUtils.getTimeStr(FFPDateUtils.getTime(new Date()), FFPDateUtils.INT_TIME_FORMAT));
		head.setRequestRefno(reqRefNo);//Request ref ID of head
		head.setAccountingDate(FFPDateUtils.getDateStr(new Date(), FFPDateUtils.INT_DATE_FORMAT));
		//head.setSystemRefno("");
		head.setResponseID(FFPConstants.MSG_CODE_AGENT);//29
		head.setMessageType("FFPCTI01");//FFPCTI01
		
		root.setHEAD(head);
			
		FFPCTI01 body = new FFPCTI01();
		body.setSrcRefNm(txInfo.getSrcRefNm());//
		body.setSettlDate(txInfo.getSettlementDate() != null ? format1.format(txInfo.getSettlementDate()) : null);//NullPointerException
		body.setSettlAmt(txInfo.getSettlementAmount());
		body.setSettlCcy(txInfo.getSettlementCurrency());
			
		body.setCdtrNm(txInfo.getCreditorName());
		body.setCdtrAcTp(txInfo.getCreditorAccountNumberType());
		body.setCdtrAcNo(txInfo.getCreditorAccountNumber());
		body.setCdtrContPhone(txInfo.getCdtrContPhone());
		body.setCdtrContEmailAddr(txInfo.getCdtrContEmailAddr());
		body.setPytPurp(txInfo.getPymtCatPrps());
		body.setRemInfo(txInfo.getRemittanceInformation());
		root.setBODY(body);
			
		try 
		{
			message = FFPTcpParticipantMessageConverter.parseXml2FFPAgent(root);
		} 
		catch (Exception e)
		{
			_logger.error(String.format("Error on generating Inward credit transfer request message[FFP Credit Transfer jnl_no:%s]", jnl_no));
			//update DB status for retry?
			e.printStackTrace();
		}
	
		return message;
	}
	
	
	private void savePacs008Data(Connection conn, FFPJbP100 txInf, String ffp_jnl_no) throws Exception
	{
		//a. p100,generate Jnl No.
		//b. tb_tx_jnl
		//c. update temporary status = F after success
		//d. map remove this data
		//Map<String, FFPMsgVO_Pacs008_CdtTrfTxInf> map = new HashMap<String, FFPMsgVO_Pacs008_CdtTrfTxInf>();
		PreparedStatement pstm = null;
		PreparedStatement pstm2 = null;
		PreparedStatement pstm3 = null;
		String jnl_sql = "INSERT INTO TB_TX_JNL VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		//Add refNo, status, reject_code, reject_reason
		String p100_sql = "INSERT INTO TB_TX_P110DAT VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		String inward_sql = "UPDATE TB_BH_INWARD_FPSPYCI SET STATUS = ?, LAST_MODI_DATE = ? WHERE ID = ? AND STATUS = ?";
		//List<String> tempRefList = new ArrayList<String>();
		//int count = 0;
		try 
		{
			conn.setAutoCommit(false);
			//Insert
			pstm = conn.prepareStatement(jnl_sql);
			pstm2 = conn.prepareStatement(p100_sql);
			pstm3 = conn.prepareStatement(inward_sql);	
			int i = 1;
			String ref_no = FFPIDUtils.getSrcRefNm();
			String inward_id = txInf.getSrcRefNm();
			//String ffp_jnl_no = FFPIDUtils.getJnlNo();
			FFPTxJnl txJnl = txInf.getTxJnl();	
			//tx_p100.put(ffp_jnl_no, txInf);
			txInf.setSrcRefNm(ref_no);//for send message to agent
			txInf.setSrcRefNm(ref_no);//for send message to agent
			pstm.setString(1, ffp_jnl_no);//generate FFP->FFP Agent Jnl_no
			pstm.setString(2, FFPConstantsTxJnl.TX_STAT_CREAT);
			pstm.setString(3, FFPConstantsTxJnl.TX_CODE.TX_CODE_P110.getCode());
			pstm.setString(4, "FFP");
			pstm.setString(5, "B");
			pstm.setString(6, txJnl.getTransactionId());
			pstm.setString(7, txJnl.getEndToEndId());
			pstm.setString(8, null);
			pstm.setTimestamp(9, new java.sql.Timestamp(new Date().getTime()));
			pstm.setTimestamp(10, new java.sql.Timestamp(new Date().getTime()));
						
			pstm2.setString(i++, ffp_jnl_no);
			pstm2.setString(i++,  ref_no);//ref Num for Agent
			pstm2.setString(i++, txInf.getPymtCatPrps());
			pstm2.setString(i++, txInf.getAccountVerification());
			pstm2.setString(i++, txInf.getSettlementCurrency());
			pstm2.setString(i++, txInf.getSettlementAmount() != null ? String.valueOf(txInf.getSettlementAmount()) : null);
			pstm2.setTimestamp(i++, new java.sql.Timestamp(txInf.getSettlementDate().getTime()));
			pstm2.setString(i++, txInf.getInstructedCurrency());
			pstm2.setString(i++, txInf.getInstructedAmount() != null ? String.valueOf(txInf.getInstructedAmount()) : null);
			pstm2.setString(i++, null);		//charge info
			pstm2.setString(i++, null);
			pstm2.setString(i++, null);
			pstm2.setString(i++, null);
			pstm2.setString(i++, txInf.getDebtorName());
			pstm2.setString(i++, txInf.getDebtorAccountNumber());
			pstm2.setString(i++, txInf.getDebtorAccountNumberType());
			pstm2.setString(i++, txInf.getDebtorAgentId());//
			pstm2.setString(i++, txInf.getDebtorAgentBic());
			pstm2.setString(i++, txInf.getCreditorName());
			pstm2.setString(i++, txInf.getCreditorAccountNumber());
			pstm2.setString(i++, txInf.getCreditorAccountNumberType());
			pstm2.setString(i++, txInf.getCreditorAgentId());
			pstm2.setString(i++, txInf.getCreditorAgentBic());
			pstm2.setString(i++, txInf.getPaymentPurposeType());
			pstm2.setString(i++, txInf.getPaymentPurposeCd());
			pstm2.setString(i++, txInf.getPaymentPurposeProprietary());
			pstm2.setString(i++, txInf.getRemittanceInformation());		//remittance info
			pstm2.setString(i++, txInf.getSrvcMode());//business service type
				
			pstm3.setString(1, FFPStatus.TEMP_CREDIT_STATUS.INWARD_FINISH.getCode());
			pstm3.setTimestamp(2, new java.sql.Timestamp(new Date().getTime()));	
			pstm3.setString(3, inward_id);
			pstm3.setString(4, FFPStatus.TEMP_CREDIT_STATUS.INWARD_INITATE.getCode());
				
			pstm.executeUpdate();
			pstm2.executeUpdate();
			pstm3.executeUpdate();
				
			conn.commit();
			conn.setAutoCommit(true);
		}
		catch (Exception ex) 
		{
			ex.printStackTrace();
			_logger.error("Copy credit transfer data from temporary table of SQL execute batch failed", ex);
			throw new BatchJobException(ex);
			//update temporary table data 
			/*StringBuilder sb = new StringBuilder("UPDATE TB_INWARD_DATA SET STATUS = ?, LAST_MODI_DATE = ? WHERE ID IN(");
			for(int i= 1; i <= tempRefList.size(); i++)
			{
				sb.append(tempRefList.get(i - 1));
				if(i < tempRefList.size()) sb.append(",");
			}
			sb.append(")");
			PreparedStatement pst = null;
			try {
				pst = conn.prepareStatement(sb.toString());
				pst.setString(1, CREDIT_STATUS.INWARD_TEMP_ERROR.getCode());
				pst.setTimestamp(2, new java.sql.Timestamp(new Date().getTime()));	
				
				pst.executeUpdate();
				
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			finally
			{
				if(pst != null)
				{
					try {
						pst.close();
					} catch (SQLException e1) {
						e1.printStackTrace();
					}
				}
			}*/
		}
		finally
		{
			if(pstm != null) pstm.close();
			if(pstm2 != null) pstm2.close();
			if(pstm3 != null) pstm3.close();
		}
	}
}
