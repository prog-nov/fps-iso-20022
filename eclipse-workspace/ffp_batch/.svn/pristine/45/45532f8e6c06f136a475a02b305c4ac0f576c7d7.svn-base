package com.forms.batch.job.outward;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import com.forms.ffp.bussiness.participant.ffpcto01.FFPMsgCTO01_MutiPacs008;
import com.forms.ffp.bussiness.participant.ffpcto01.FFPMsgCTO01_Pacs008;
import com.forms.ffp.core.msg.iclfps.FFPMsgBaseHkiclMessage;
import com.forms.ffp.persistents.bean.payment.credittransfer.FFPJbP100;
import com.forms.framework.exception.BatchFrameworkException;
import com.forms.framework.log.BatchLogger;
import com.forms.framework.util.ResourceUtil;

public class FFPMsgCTO01Pacs008XMLFILEThread implements Runnable {
	private BatchLogger _logger;
	private String mode;;
	private FFPJbP100 fb;
	private List<FFPJbP100> multi008List;
	private String multi008FilePath;
	private static int eachMessageMaxSize;
	private static int eachMessageItemMaxNum;
	public static String batchSubmissionDirectoryPath;
	public static String clearingCode;

	private static final String PROPERTY_FILE_NAME = "outwardBatchProperty";

	HashMap<String, String> btchMap;

	public void initSingle008Thread(FFPJbP100 fb) {
		this.fb = fb;
		mode = "S";
		_logger = BatchLogger.getLogger("FFPMsgCTO01Pacs008XMLFILEJob", "PAYC02Thread",
				FFPMsgCTO01Pacs008XMLFILEThread.class);
	}

	public void initMulti008Thread(List<FFPJbP100> multi008List, String multi008FilePath,
			HashMap<String, String> btchMap) {
		this.multi008List = multi008List;
		this.multi008FilePath = multi008FilePath;
		this.btchMap = btchMap;
		mode = "M";
		_logger = BatchLogger.getLogger("FFPMsgCTO01Pacs008XMLFILEJob", "PAYC03Thread",
				FFPMsgCTO01Pacs008XMLFILEThread.class);
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub

		try {
			Properties prop = (Properties) ResourceUtil.getInstance().getResource(CreditTransferOutwardBatchFileProcessor.OUTWARD_BATCH_PROPERTY,
					ResourceUtil.RESOURCE_PROPERTIES_TYPE);
			eachMessageMaxSize = Integer.parseInt(prop.getProperty("defaultEachMessageMaxSize")) * 1024 * 1024;
			eachMessageItemMaxNum = Integer.parseInt(prop.getProperty("defaultEachMessageItemMaxNum"));
			batchSubmissionDirectoryPath = prop.getProperty("batchSubmissionDirectoryPath");
			clearingCode = prop.getProperty("SPDBClearingCode");
			_logger.info(String.format(
					"Read Properties From file %s.properties, eachMessageMaxSize=%s, eachMessageItemMaxNum=%s, batchSubmissionDirectoryPath=%s, clearingCode=%s",
					PROPERTY_FILE_NAME, eachMessageMaxSize, eachMessageItemMaxNum, batchSubmissionDirectoryPath,
					clearingCode));
		} catch (BatchFrameworkException e) {
			// TODO Auto-generated catch block
			_logger.error(e.getMessage());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			_logger.error(e.getMessage());
		}

		if ("S".equals(mode)) {
			_logger.info("Generate A Thread To Handle PACS008_PAYC02 Message");
			writeSingle008ToFile();
		} else if ("M".equals(mode)) {
			_logger.info("Generate A Thread To Handle PACS008_PAYC03 Message");
			writeMulti008ToFile();
		}
	}

	private void writeSingle008ToFile() {
		BufferedWriter bw = null;
		try {

			FFPMsgCTO01_Pacs008 single008 = new FFPMsgCTO01_Pacs008(this.fb);
			FFPMsgBaseHkiclMessage messageObj = (FFPMsgBaseHkiclMessage) single008;
			String msg = messageObj.parseHkiclMessage();
			_logger.info("Generate A PACS008_PAYC02 Message");
			SimpleDateFormat fileNameDateForm = new SimpleDateFormat("yyyyMMdd");
			String fileName = "FPSPCRO" + clearingCode + fileNameDateForm.format(new Date())
					+ String.format("%08d", CreditTransferOutwardBatchFileProcessor.getBatSubSeqNum()) + ".xml";
			_logger.info(
					String.format("Start To Write PACS008_PAYC02 File %s", batchSubmissionDirectoryPath + fileName));
			bw = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(new File(batchSubmissionDirectoryPath + fileName)), "UTF-8"));
			bw.write(msg);
			bw.flush();
			_logger.info(
					String.format("Finish Writing PACS008_PAYC02 File %s", batchSubmissionDirectoryPath + fileName));
		} catch (Exception e) {
			_logger.error(e.getMessage());
		} finally {
			if (bw != null) {
				try {
					bw.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					_logger.error(e.getMessage());
				}
			}
		}
	}

	private void writeMulti008ToFile() {
		BufferedWriter bw = null;
		try {
			_logger.info(String.format("Start To Write PACS008_PAYC03 File %s", this.multi008FilePath));
			FFPMsgCTO01_MutiPacs008 multi008 = new FFPMsgCTO01_MutiPacs008(this.multi008List, this.btchMap);
			String mesText = multi008.parseHkiclMessage();

			bw = new BufferedWriter(
					new OutputStreamWriter(new FileOutputStream(new File(this.multi008FilePath)), "UTF-8"));
			bw.write(mesText);
			bw.flush();
			_logger.info(String.format("Finish Writing PACS008_PAYC03 File %s", this.multi008FilePath));
		} catch (Exception e) {
			_logger.error(e.getMessage());
		} finally {
			if (bw != null) {
				try {
					bw.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					_logger.error(e.getMessage());
				}
			}
		}
	}

}
