package com.forms.batch.job.unit.participant.outwardresponse;

import java.io.File;
import java.io.FilenameFilter;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.forms.ffp.adaptor.define.FFPJaxbConstants;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_envelope_01.BatchInformation;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_envelope_01.FpsMessageEnvelope;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_envelope_01.ISO20022BusinessDataV01;
import com.forms.ffp.adaptor.jaxb.iclfps.head_001_001_01.BusinessApplicationHeaderV01;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.FIToFIPaymentStatusReportV08;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.GroupHeader531;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.OriginalGroupHeader71;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.PaymentTransaction801;
import com.forms.ffp.bussiness.iclfps.pacs002.FFPVO_Pacs002;
import com.forms.ffp.bussiness.iclfps.pacs002.FFPVO_Pacs002_TxInfAndSts;
import com.forms.ffp.core.exception.FFPSystemException;
import com.forms.ffp.core.exception.FFPTeErrorMsg;
import com.forms.ffp.core.msg.iclfps.FFPHkiclMessageConverter;
import com.forms.framework.BatchBaseJob;
import com.forms.framework.exception.BatchJobException;
import com.forms.framework.log.BatchLogger;
import com.forms.framework.persistence.ConnectionManager;
import com.forms.framework.persistence.EntityManager;
import com.forms.framework.util.PatternUtil;

//continue to change by zy
public class FPSPCRRReader extends BatchBaseJob
{
	public static final Class<FPSPCRRReader> CLASS_NAME = FPSPCRRReader.class;
	public static final String ERROR_CODE = FFPTeErrorMsg.getErrorCode(CLASS_NAME, 0);
	private BatchLogger _logger = BatchLogger.getLogger(this.jobName, this.actionName, CLASS_NAME);
	private static SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");

	private static final String ADMIN002_NO_REF = "NOREF";

	private static String filePath = null;
	private static String fileNamePattern = null;
	private static Connection loc_conn = null;

	public void init()
	{
		final String METHOD_NAME = "initial()";
		try
		{
			_logger.info("init credit transfer outward response config started");
			filePath = this.batchData + this.actionElement.element("parameters").elementText("local-file-path");
			fileNamePattern = this.actionElement.element("parameters").elementText("filename-pattern");

			PatternUtil patternUtil = new PatternUtil(this.batchAcDate);
			Map<String, String> replaceMap = new HashMap<String, String>();
			replaceMap.put("YYYYMMDD", this.batchAcDate.replaceAll("-", ""));
			replaceMap.put("clearingcode", this.clearingCode);
			fileNamePattern = patternUtil.patternReplace(replaceMap, fileNamePattern);

			_logger.info(String.format("Credit transfer outward batch response file filePath[%s]", filePath));
			_logger.info("init credit transfer outward response config started end");
			if (loc_conn == null)
			{
				loc_conn = ConnectionManager.getInstance().getConnection();
			}
		} catch (Exception ex)
		{
			ex.printStackTrace();
			_logger.info("initial() error ,please check! ");

		}
	}

	@Override
	public boolean execute() throws BatchJobException
	{
		try
		{
			// File workingPath = new File(filePath);
			// final String filePattern = this.fileNamePattern;
			// 1.Get all files in this batch time
			List<File> readfiles = readfiles(filePath);

			if (readfiles != null)
			{

				List<File> loc_fileList = new ArrayList<>();
				for (File loc_tmpFile : readfiles)
				{
					String loc_filename = loc_tmpFile.getName();
					if (!loc_filename.matches(fileNamePattern))
					{
						continue;
					}
					loc_fileList.add(loc_tmpFile);

				}

				if (loc_fileList.size() > 0)
				{

					Map<String, List<ISO20022BusinessDataV01>> map = this.readFile(loc_fileList);
					this.processor(map);

				}
			}

			Date loc_endTime = Calendar.getInstance().getTime();
			batchLogger.info("read inward batch end at" + loc_endTime);
			return true;
		} catch (Exception ex)
		{
			ex.printStackTrace();
			System.exit(1);
		}
		return true;
	}

	public void processor(Map<String, List<ISO20022BusinessDataV01>> busiDataMap) throws FFPSystemException, BatchJobException
	{
		batchLogger.info("Started processor inward batch file");

		Iterator<String> fileKeyInfoItr = busiDataMap.keySet().iterator();

		// Connection con = null;
		String batchId = null;// each batch time have the same batch id in all
								// batch files
		try
		{

			while (fileKeyInfoItr.hasNext())
			{
				String fileKeyInfo = fileKeyInfoItr.next();

				String fileName = fileKeyInfo.substring(0, fileKeyInfo.lastIndexOf("-"));
				if (batchId == null)
					batchId = fileKeyInfo.substring(fileKeyInfo.lastIndexOf("-") + 1);
				List<ISO20022BusinessDataV01> busiData = busiDataMap.get(fileKeyInfo);

				for (ISO20022BusinessDataV01 data : busiData)
				{
					BusinessApplicationHeaderV01 head = (BusinessApplicationHeaderV01) data.getContent().get(0).getValue();
					String messageType = head.getMsgDefIdr();
					String busiSvrType = head.getBizSvc().value();

					if (FFPJaxbConstants.JAXB_MSG_TYPE_PACS_002.compareTo(messageType) == 0)
					{
						com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.Document doc002 = (com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.Document) data.getContent().get(1).getValue();

						// 4a.parse xml
						FFPVO_Pacs002 pacs002 = parse002(doc002, fileName);

						// 5.persistent in temp table
						persistentFileData(pacs002, fileName, batchId, busiSvrType);
					}

					else if (ADMIN002_NO_REF.equals(messageType))
					{
						_logger.info("TODO");
					}
				}

			}
			// check FFP Agent status, CUT OFF/ON
		} catch (Exception ex)
		{
			ex.printStackTrace();
			batchLogger.error("Process inward file error", ex);
			throw new BatchJobException(ex);
		}
	}

	private Map<String, List<ISO20022BusinessDataV01>> readFile(List<File> fileList) throws Exception
	{
		// fileName:FPSPYCIkkkYYYYMMDDhhmmnnnn.xml
		// content:credit
		// transfer(pacs008),return/refund(pacs004),notification(camt054)
		batchLogger.info("Started read inward batch file");
		Map<String, List<ISO20022BusinessDataV01>> validBusData = new HashMap<String, List<ISO20022BusinessDataV01>>();
		if (fileList != null)
		{
			// 2. validate number of files in this batch time
			Map<String, FpsMessageEnvelope> validFiles = validateInwardFiles(fileList);

			Iterator<String> fileNameIt = validFiles.keySet().iterator();
			while (fileNameIt.hasNext())
			{

				String fileName = fileNameIt.next();
				FpsMessageEnvelope xmlFileData = validFiles.get(fileName);
				String batchId = xmlFileData.getBtchInf().getBtchId();
				String fileName_batchId = String.format("%s-%s", fileName, batchId);
				// 3.validate message counts are correctly with each valid files
				String msgCount = xmlFileData.getNbOfMsgs();// get BizData count
															// of each file
				List<ISO20022BusinessDataV01> bisDataList = xmlFileData.getFpsPylds().getBizData();
				if (msgCount.compareTo(String.valueOf(bisDataList.size())) != 0)
				{
					batchLogger.info(String.format("The file contains invalid message counts:FileName[%s]-NoOfMsgs[%s]-ActualMsgsCount[%s]", fileName, msgCount, String.valueOf(bisDataList.size())));
				} else
				{
					validBusData.put(fileName_batchId, bisDataList);
				}
			}

			batchLogger.info("Ended read inward batch file");
		}
		return validBusData;
	}

	public Map<String, FpsMessageEnvelope> validateInwardFiles(List<File> fileList) throws Exception
	{
		if (fileList.size() == 0)
			return new HashMap<String, FpsMessageEnvelope>();
		Map<String, FpsMessageEnvelope> validFileData = new HashMap<String, FpsMessageEnvelope>();
		Map<String, FpsMessageEnvelope> mapFile = new HashMap<String, FpsMessageEnvelope>();
		List<String> keyCount = new ArrayList<String>();

		for (File xmlFile : fileList)
		{
			try
			{
				FpsMessageEnvelope result = FFPHkiclMessageConverter.parseObject(xmlFile);

				BatchInformation batchInfo = result.getBtchInf();
				String batchID = batchInfo.getBtchId();
				String numberOfFile = batchInfo.getNbOfFls();
				// check batchId & numberOfFile, maybe numberOfFile>1, so more
				// than one file contains the same batch ID.
				String keyFileIdStr = String.format("BatchId[%s]-NumberOfFile[%s]-fileName[%s]", batchID, numberOfFile, xmlFile.getName());
				String keyCountStr = String.format("BatchId[%s]-NumberOfFile[%s]", batchID, numberOfFile);
				batchLogger.info(String.format("File info:%s", keyFileIdStr));
				if (Integer.valueOf(numberOfFile) > 1)
				{
					mapFile.put(keyFileIdStr, result);
					keyCount.add(keyCountStr);
				} else
				{
					// add a single batch file
					validFileData.put(xmlFile.getName(), result);
				}
			} catch (Exception ex)
			{
				batchLogger.error(String.format("Error on parsing file[fileName:%s]", xmlFile.getName()), ex);
				throw ex;
			}

		}

		Comparator<String> comp = new Comparator<String>()
		{

			@Override
			public int compare(String arg0, String arg1)
			{
				return arg0.compareTo(arg1);
			}
		};

		Collections.sort(keyCount, comp);

		// Calculate count
		Map<String, Integer> countMap = new HashMap<String, Integer>();
		for (String str : keyCount)
		{
			if (countMap.containsKey(str))
				countMap.put(str, countMap.get(str) + 1);
			else
				countMap.put(str, 1);
		}

		// Remove invalid file
		List<String> validKey = new ArrayList<String>();
		Iterator<String> iteStr = countMap.keySet().iterator();
		while (iteStr.hasNext())
		{
			String countKey = iteStr.next();
			Integer countValue = countMap.get(countKey);
			// whether count matches file No. or not
			if (countKey.substring(countKey.lastIndexOf("[") + 1, countKey.lastIndexOf("]")).compareTo(String.valueOf(countValue)) != 0)
			{
				// Not match
				batchLogger.info(String.format("The files contain %s not matched with actual number of files!", countKey));
			} else
			{
				validKey.add(countKey);// add matched key info. of files
			}
		}

		Iterator<String> iter = mapFile.keySet().iterator();
		while (iter.hasNext())
		{
			String key = iter.next();
			if (validKey.contains(key.substring(0, key.lastIndexOf("-"))))
			{
				validFileData.put(key.substring(key.lastIndexOf("[") + 1, key.lastIndexOf("]")), mapFile.get(key));
			}
		}

		return validFileData;
	}

	public void persistentFileData(FFPVO_Pacs002 pacs002, String fileName, String batchId, String busiSvrType) throws Exception
	{
		String sql = "insert into tb_tx_jnl_res_temp(file_name,pro_stat,transaction_id,end_to_end_id,tx_stat,rej_code,rej_rsn) values(?,?,?,?,?,?,?);";

		try
		{
			List<FFPVO_Pacs002_TxInfAndSts> txInfList = pacs002.getTxInfList();
			if (txInfList != null && txInfList.size() > 0)
			{
				for (FFPVO_Pacs002_TxInfAndSts txInfo : txInfList)
				{
					List params_list = new ArrayList();
					params_list.add(fileName);
					params_list.add("APP");
					params_list.add(txInfo.getOrgnlTxId());
					params_list.add(txInfo.getOrgnlEndToEndId());
					params_list.add(txInfo.getTxSts());
					if (txInfo.getTxStsAddtlInf() != null)
					{
						params_list.add(txInfo.getTxStsRsnCode());
						params_list.add(txInfo.getTxStsAddtlInf().get(0));
					}else {
						params_list.add(null);
						params_list.add(null);
					}
					EntityManager.update(loc_conn, sql, params_list.toArray());
				}
			}
		} catch (Exception ex)
		{
			batchLogger.error(String.format("Temporarily persistent batch file[%s] data error", fileName), ex);
			throw ex;
		}
	}

	private FFPVO_Pacs002 parse002(com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.Document pacs002, String fileName) throws Exception
	{
		FFPVO_Pacs002 pacs002MsgVo = new FFPVO_Pacs002();
		FIToFIPaymentStatusReportV08 fiToFIPmtStsRpt = pacs002.getFIToFIPmtStsRpt();
		GroupHeader531 grpHdr = fiToFIPmtStsRpt.getGrpHdr();
		if (grpHdr != null)
		{

			pacs002MsgVo.setMsgId(grpHdr.getMsgId());
			pacs002MsgVo.setCreateDate(grpHdr.getCreDtTm().toGregorianCalendar().getTime());
		}
		OriginalGroupHeader71 orgnlGrpInfAndSts = fiToFIPmtStsRpt.getOrgnlGrpInfAndSts();
		if (orgnlGrpInfAndSts != null)
		{

			pacs002MsgVo.setOrgnlMsgId(orgnlGrpInfAndSts.getOrgnlMsgId());
			pacs002MsgVo.setOrgnlMsgNmId(orgnlGrpInfAndSts.getOrgnlMsgNmId());
		}
		List<PaymentTransaction801> txInfAndSts = fiToFIPmtStsRpt.getTxInfAndSts();
		List<FFPVO_Pacs002_TxInfAndSts> txInfList = new ArrayList();
		if (txInfAndSts != null && txInfAndSts.size() > 0)
		{
			for (PaymentTransaction801 paymentTransaction801 : txInfAndSts)
			{
				FFPVO_Pacs002_TxInfAndSts txInf = new FFPVO_Pacs002_TxInfAndSts();
				txInf.setOrgnlEndToEndId(paymentTransaction801.getOrgnlEndToEndId());
				txInf.setOrgnlTxId(paymentTransaction801.getOrgnlTxId());
				txInf.setTxSts(paymentTransaction801.getTxSts().value());
				if (paymentTransaction801.getStsRsnInf() != null)
				{

					txInf.setTxStsRsnCode(paymentTransaction801.getStsRsnInf().getRsn().getPrtry());
					txInf.setTxStsAddtlInf(paymentTransaction801.getStsRsnInf().getAddtlInf());
				}
				txInfList.add(txInf);

			}

		}

		pacs002MsgVo.setTxInfList(txInfList);
		return pacs002MsgVo;
	}

	public List<File> readfiles(String filepath) throws FFPSystemException
	{
		final String METHOD_NAME = "readfiles()";
		_logger.info("readfiles(String filepath) start ");

		List<File> listFiles = new ArrayList();
		try
		{
			File file = new File(filepath);
			if (file.isDirectory())
			{
				String[] filelist = file.list();
				for (int i = 0; i < filelist.length; i++)
				{
					File readfile = new File(filepath + "\\" + filelist[i]);
					listFiles.add(readfile);
				}
			}
			_logger.info("readfiles(String filepath) end ");

		} catch (Exception ex)
		{
			ex.printStackTrace();
			_logger.info("readfiles(String filepath) error the detail is  " + filepath + " failed, please check!");

		}
		return listFiles;
	}

}