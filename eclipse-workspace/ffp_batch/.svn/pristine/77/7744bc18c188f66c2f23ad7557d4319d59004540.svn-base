package com.forms.batch.job.unit.participant.directdebit;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.forms.batch.job.unit.participant.message.ffpddo01.FFPMsg_RES_DDO01;
import com.forms.ffp.core.define.FFPConstantsTxJnl;
import com.forms.ffp.core.msg.FFPAdaptorMgr;
import com.forms.ffp.core.msg.participant.FFPSendTcpMessageResp;
import com.forms.ffp.core.utils.FFPIDUtils;
import com.forms.framework.BatchBaseJob;
import com.forms.framework.exception.BatchJobException;
import com.forms.framework.persistence.ConnectionManager;
import com.forms.framework.persistence.EntityManager;

public class DirectDebitOutwardBatchResponseFileProcessor extends BatchBaseJob {
	private static Connection conn = null;

	public void init() throws BatchJobException {

	}

	@Override
	public boolean execute() throws BatchJobException {
		// TODO Auto-generated method stub
		try {

			conn = ConnectionManager.getInstance().getConnection();
			this.batchLogger.info(String.format("Connect To Databse"));

			List<Map<String, Object>> resList = getMsgDataFromTempTable();

			if (resList != null) {
				for (int i = 0; i < resList.size(); i++) {
					try {
						String jnlNo = fpspddrMessageHandler(resList.get(i));
						String resRefno = FFPIDUtils.getRefno();
						FFPMsg_RES_DDO01 ffpmsgddo01 = generateResMessage(jnlNo, resRefno);
						String resMsg = sendResMsgToAgent(ffpmsgddo01);
						if (("ACK").equals(resMsg)) {
							updateSentMessageInfo(jnlNo, resRefno);
						} else {
							throw new Exception("Error Occurred In Response Message From Agent.");
						}
					} catch (Exception e) {
						this.batchLogger.error(e.getMessage());
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			this.batchLogger.error(e.getMessage());
		} finally {
			if (conn != null) {
				try {
					conn.close();
					this.batchLogger.info(String.format("Close The Databse"));
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					this.batchLogger.error(e.getMessage());
				}
			}
		}

		return true;
	}

	// get data from tb_tx_res_fpspddr_temp
	private List<Map<String, Object>> getMsgDataFromTempTable() throws Exception {
		// query from tb_tx_res_fpspddr_temp
		String query_res_fpspddr_temp_sql = "SELECT * FROM tb_tx_res_fpspddr_temp WHERE `STATUS` = ?";
		ArrayList<String> query_res_fpspddr_temp_list = new ArrayList<>();

		query_res_fpspddr_temp_list.add("I");

		List<Map<String, Object>> resList = EntityManager.queryMapList(conn, query_res_fpspddr_temp_sql,
				query_res_fpspddr_temp_list.toArray());
		return resList;
	}

	// handle the message pacs002
	private String fpspddrMessageHandler(Map<String, Object> tempResultMap) throws Exception {
		String jnlNo = null;

		// query Jnl from TB_TX_JNL
		String query_tb_tx_jnl_sql = "SELECT JNL_NO FROM tb_tx_jnl WHERE TRANSACTION_ID  = ? AND END_TO_END_ID = ? ";

		this.batchLogger.info(String.format("Query JNL_NO From tb_tx_jnl, orgnlTxId = %s, orgnlEndToEndId = %s",
				tempResultMap.get("ORGNL_TX_ID"), tempResultMap.get("ORGNL_END_TO_END_ID")));
		ArrayList<Object> Jnl_query_list = new ArrayList<>();
		Jnl_query_list.add(tempResultMap.get("ORGNL_TX_ID"));
		Jnl_query_list.add(tempResultMap.get("ORGNL_END_TO_END_ID"));
		Map<String, Object> queryMap = EntityManager.queryMap(conn, query_tb_tx_jnl_sql, Jnl_query_list.toArray());
		if (queryMap == null) {
			throw new Exception(String.format("Data Form Database Is No found, orgnlTxId = %s, orgnlEndToEndId = %s",
					tempResultMap.get("ORGNL_TX_ID"), tempResultMap.get("ORGNL_END_TO_END_ID")));

		} else {
			conn.setAutoCommit(false);
			this.batchLogger.info("Database Transaction Open");

			jnlNo = (String) (queryMap.get("JNL_NO"));

			// update tb_tx_jnlaction
			String update_tb_tx_jnlaction_sql = "UPDATE tb_tx_jnlaction SET MSG_STATUS = ?, MSG_COMPL_DATE = ? WHERE JNL_NO = ? ORDER BY SEQ_NO ASC LIMIT 1";
			this.batchLogger.info(String.format("Update tb_tx_jnlaction, JNL_NO = %s", jnlNo));

			ArrayList<Object> update_tb_tx_jnlaction_list = new ArrayList<>();

			update_tb_tx_jnlaction_list.add(FFPConstantsTxJnl.MSG_STATUS.MSG_STAT_MSYNC.getStatus());

			update_tb_tx_jnlaction_list.add(new Timestamp(new Date().getTime()));

			update_tb_tx_jnlaction_list.add(jnlNo);

			EntityManager.update(conn, update_tb_tx_jnlaction_sql, update_tb_tx_jnlaction_list.toArray());

			// select * from tb_tx_jnlaction
			String query_tb_tx_jnlaction_sql = "SELECT * FROM tb_tx_jnlaction WHERE JNL_NO = ? ";
			this.batchLogger.info(String.format("Query All From tb_tx_jnlaction, JNL_NO = %s", jnlNo));

			ArrayList<Object> query_tb_tx_jnlaction_list = new ArrayList<>();

			query_tb_tx_jnlaction_list.add(jnlNo);

			Map<String, Object> jnlactionResultmap = EntityManager.queryMap(conn, query_tb_tx_jnlaction_sql,
					query_tb_tx_jnlaction_list.toArray());

			// insert into tb_tx_jnlaction
			// String insert_tb_tx_jnlaction_sql = "INSERT INTO
			// tb_tx_jnlaction(JNL_NO, SEQ_NO, MSG_ID, MSG_FROM_TYPE, MSG_FROM,
			// MSG_TO_TYPE, MSG_TO, MSG_TYPE, MSG_STATUS, REJ_CODE, REJ_RSN,
			// MSG_CREAT_DATE, MSG_PROCE_DATE, MSG_COMPL_DATE)
			// VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			String insert_tb_tx_jnlaction_sql = "INSERT INTO tb_tx_jnlaction(JNL_NO, MSG_ID, MSG_FROM_TYPE, MSG_FROM, MSG_TO_TYPE, MSG_TO, MSG_TYPE, MSG_STATUS, REJ_CODE, REJ_RSN, MSG_CREAT_DATE, MSG_PROCE_DATE, MSG_COMPL_DATE) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";
			this.batchLogger.info(String.format("Query All From tb_tx_jnlaction, JNL_NO = %s", jnlNo));

			ArrayList<Object> insert_tb_tx_jnlaction_list = new ArrayList<>();

			insert_tb_tx_jnlaction_list.add(jnlNo);
			// insert_tb_tx_jnlaction_list.add(((Integer)
			// jnlactionResultmap.get("SEQ_NO")) + 1);
			insert_tb_tx_jnlaction_list.add((String) jnlactionResultmap.get("MSG_ID"));
			insert_tb_tx_jnlaction_list.add((String) jnlactionResultmap.get("MSG_FROM_TYPE"));
			insert_tb_tx_jnlaction_list.add((String) jnlactionResultmap.get("MSG_FROM"));
			insert_tb_tx_jnlaction_list.add((String) jnlactionResultmap.get("MSG_TO_TYPE"));
			insert_tb_tx_jnlaction_list.add((String) jnlactionResultmap.get("MSG_TO"));
			insert_tb_tx_jnlaction_list.add((String) jnlactionResultmap.get("MSG_TYPE"));

			insert_tb_tx_jnlaction_list.add(FFPConstantsTxJnl.MSG_STATUS.MSG_STAT_APPST.getStatus());
			insert_tb_tx_jnlaction_list.add(tempResultMap.get("RSN"));
			insert_tb_tx_jnlaction_list.add(tempResultMap.get("ADDITIONAL_INF"));

			Timestamp ts = new Timestamp(new Date().getTime());
			insert_tb_tx_jnlaction_list.add(ts);
			insert_tb_tx_jnlaction_list.add(ts);
			insert_tb_tx_jnlaction_list.add(ts);

			EntityManager.update(conn, insert_tb_tx_jnlaction_sql, insert_tb_tx_jnlaction_list.toArray());

			// update tb_tx_res_fpspddr_temp
			String update_res_fpspddr_temp_sql = "UPDATE tb_tx_res_fpspddr_temp SET `STATUS` = ? WHERE FILE_NAME = ?";
			this.batchLogger.info(String.format("Update tb_tx_res_fpspddr_temp set STATUS = %s, FILE_NAME = %s", "F",
					tempResultMap.get("FILE_NAME")));

			ArrayList<Object> update_res_fpspddr_temp_list = new ArrayList<>();

			update_res_fpspddr_temp_list.add("F");
			update_res_fpspddr_temp_list.add(tempResultMap.get("FILE_NAME"));

			EntityManager.update(conn, update_res_fpspddr_temp_sql, update_res_fpspddr_temp_list.toArray());

			conn.commit();
			this.batchLogger.info("Database Transaction Commit");
		}
		return jnlNo;

	}

	// generate ffpddo01 request message
	private FFPMsg_RES_DDO01 generateResMessage(String jnlNo, String resRefno) throws Exception {
		this.batchLogger.info("Begin To Generate FFPCHK01 Request Message");
		Map<String, Object> queryContentMap = querySentMessageContent(jnlNo);

		queryContentMap.put("resRefno", resRefno);
		FFPMsg_RES_DDO01 ffpddo01 = new FFPMsg_RES_DDO01(queryContentMap);

		this.batchLogger.info("Finishing Generating FFPCHK01 Request Message");

		return ffpddo01;
	}

	// tcp socket
	private String sendResMsgToAgent(FFPMsg_RES_DDO01 ffpmsgddo01) throws Exception {
		String resMsg = "";

		FFPAdaptorMgr ffpMsgAdaptor = FFPAdaptorMgr.getInstance();
		FFPSendTcpMessageResp messageResp = (FFPSendTcpMessageResp) ffpMsgAdaptor.execute(ffpmsgddo01);

		if (messageResp.getRespMessage() == null) {
			throw new Exception("Get Nullpoint Response Replies!");
		}

		resMsg = messageResp.getRespMessage();

		return resMsg;
	}

	private Map<String, Object> querySentMessageContent(String jnlNo) {
		// query from TB_TX_JNL_JOIN_P200DAT
		String QUERY_JNLACT_JOIN_P200DAT_SQL = "SELECT " + "tb_tx_jnlaction.JNL_NO, " + "tb_tx_jnlaction.MSG_ID, "
				+ "tb_tx_jnlaction.REJ_CODE, " + "tb_tx_jnlaction.REJ_RSN, " + "tb_tx_p200dat.SRC_REF_NM "
				+ "FROM tb_tx_jnlaction " + "INNER JOIN tb_tx_p200dat ON tb_tx_jnlaction.JNL_NO = tb_tx_p200dat.JNL_NO "
				+ "WHERE tb_tx_jnlaction.JNL_NO = ? " + "ORDER BY tb_tx_jnlaction.SEQ_NO DESC LIMIT 1";
		this.batchLogger.info(String.format("Query From tb_tx_jnlaction_join_p200dat, jnlNo = %s", jnlNo));
		Map<String, Object> queryJNLACTJOINP200Map = new HashMap<>();
		try {
			ArrayList<Object> jnlaction_join_p200dat_query_list = new ArrayList<>();
			jnlaction_join_p200dat_query_list.add(jnlNo);
			queryJNLACTJOINP200Map = EntityManager.queryMap(conn, QUERY_JNLACT_JOIN_P200DAT_SQL,
					jnlaction_join_p200dat_query_list.toArray());
			if (queryJNLACTJOINP200Map == null) {
				throw new Exception(String.format(
						"Data No Found, Database = tb_tx_jnljnlaction INNER JOIN tb_tx_p200dat, Field(JNL_NO = %s)",
						jnlNo));
			}

			return queryJNLACTJOINP200Map;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			this.batchLogger.error(e.getMessage());
			return null;
		}

	}

	private void updateSentMessageInfo(String jnlNo, String resRefno) {
		try {
			conn.setAutoCommit(false);
			this.batchLogger.info("Database Transaction Open");
			Timestamp lastUpdateTs = new Timestamp(new Date().getTime());

			// update tb_tx_jnl
			String update_tb_tx_jnl_sql = "UPDATE tb_tx_jnl SET TX_STAT = ?, LAST_UPDATE_TS = ? WHERE JNL_NO = ? ";

			this.batchLogger.info(String.format("Update tb_tx_jnl, JNL_NO = %s", jnlNo));
			ArrayList<Object> Jnl_update_list = new ArrayList<>();

			Jnl_update_list.add(FFPConstantsTxJnl.TX_STATUS.TX_STAT_COMPL.getStatus());
			Jnl_update_list.add(lastUpdateTs);
			Jnl_update_list.add(jnlNo);
			EntityManager.update(conn, update_tb_tx_jnl_sql, Jnl_update_list.toArray());

			// update TB_TX_JNLACTION
			String update_tb_tx_jnlaction_sql = "UPDATE tb_tx_jnlaction Set MSG_ID = ?, MSG_STATUS = ?, MSG_COMPL_DATE = ? WHERE JNL_NO = ? ORDER BY SEQ_NO DESC LIMIT 1";
			this.batchLogger.info(String.format("Update tb_tx_jnlaction JNL_NO = %s", jnlNo));
			ArrayList<Object> jnlaction_update_list = new ArrayList<>();
			jnlaction_update_list.add(resRefno);
			jnlaction_update_list.add(FFPConstantsTxJnl.MSG_STATUS.MSG_STAT_MSYNC.getStatus());
			jnlaction_update_list.add(lastUpdateTs);
			jnlaction_update_list.add(jnlNo);

			EntityManager.update(conn, update_tb_tx_jnlaction_sql, jnlaction_update_list.toArray());
			conn.commit();
			this.batchLogger.info("Database Transaction Commit");
		} catch (Exception e) {
			this.batchLogger.error(e.getMessage());
			try {
				conn.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				this.batchLogger.error(e1.getMessage());
			}
		}
	}

}