package com.forms.batch.job.unit.participant.receivefile;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;

import com.forms.ffp.core.utils.FFPIDUtils;
import com.forms.framework.log.BatchLogger;

public class FFPReceiveFileServerThread implements Runnable
{
	Socket socket = null;// 和本线程相关的Socket
	
	String outputPath = null;

	public FFPReceiveFileServerThread(String outputPath, Socket socket)
	{
		this.outputPath = outputPath;
		this.socket = socket;
	}

	@Override
	public void run()
	{
		BatchLogger logger = BatchLogger.getLogger("RECEIVE_FILE_SERVER_SESSION", String.valueOf(Thread.currentThread().getId()), FFPReceiveFileServerThread.class);
		
		InputStream is = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		OutputStream os = null;
		PrintWriter pw = null;
		try
		{
			// 与客户端建立通信，获取输入流，读取取客户端提供的信息
			is = socket.getInputStream();
			isr = new InputStreamReader(is, "UTF-8");
			br = new BufferedReader(isr);
			String data = null;
			File file = new File(outputPath + File.separator + FFPIDUtils.getReceiveParticipantFileName() + ".temp");
			while ((data = br.readLine()) != null)
			{// 循环读取客户端的信息
				logger.info("我是服务器，客户端提交信息为：" + data);
				
			}
			socket.shutdownInput();// 关闭输入流

			// 获取输出流，响应客户端的请求
			os = socket.getOutputStream();
			pw = new PrintWriter(os);
			pw.write("ACK");
			pw.flush();
		} catch (IOException e)
		{
			e.printStackTrace();
		} finally
		{
			try
			{
				if (pw != null)
					pw.close();
				if (os != null)
					os.close();
				if (br != null)
					br.close();
				if (isr != null)
					isr.close();
				if (is != null)
					is.close();
				if (socket != null)
					socket.close();
			} catch (IOException e)
			{
				e.printStackTrace();
			}

		}

	}

}
