package com.forms.batch.job.outward;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.xml.datatype.XMLGregorianCalendar;

import com.forms.ffp.adaptor.jaxb.iclfps.admi_002_001_01.MessageRejectV01;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_envelope_01.FpsMessageEnvelope;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_envelope_01.ISO20022BusinessDataV01;
import com.forms.ffp.adaptor.jaxb.iclfps.head_001_001_01.BusinessApplicationHeaderV01;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.Document;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.FPSTransactionStatusCode;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.PaymentTransaction801;
import com.forms.ffp.adaptor.jaxb.iclfps.pacs_002_001_08.StatusReason6Choice1;
import com.forms.ffp.adaptor.jaxb.participant.response.ROOT;
import com.forms.ffp.adaptor.jaxb.participant.response.ffpcto01.FFPCTO01;
import com.forms.ffp.core.msg.iclfps.FFPHkiclMessageConverter;
import com.forms.ffp.core.msg.participant.FFPParticipantMessageAckConverter;
import com.forms.framework.persistence.ConnectionManager;
import com.forms.framework.persistence.EntityManager;

public class CreditTransferOutwardBatchResponseFileProcessor {
	// public static final String FILE_PATH = "C:\\Users\\zhang qing
	// wen\\Desktop\\gcl";
	public static final String FILE_PATH = "C:\\Users\\zhang qing wen\\Desktop\\dy";
	public static final String TO_IP = "172.21.21.252";
	public static final int TO_PORT = 100;
	public static final String COMP_FROM_ICL_O = "COMP";
	public static final String REJ_FROM_ICL_O = "REJ";
	public static final boolean FALSE = false;
	public static String readFromFile(File src) {
		try {
			BufferedReader bufferedReader = new BufferedReader(new FileReader(src));
			StringBuilder stringBuilder = new StringBuilder();
			String content;
			while ((content = bufferedReader.readLine()) != null) {
				stringBuilder.append(content);
			}
			return stringBuilder.toString();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return null;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	// 解析ICL
	public static void main(String[] args) throws Exception {
		dealXml();
	}
	public static void dealXml() throws Exception {
		List<File> readfiles = CreditTransferOutwardBatchResponseFileProcessor.readfiles(FILE_PATH);
		String transctionId = null;
		String AddtlInf = null;
		String prtry = null;
		String btchId= null;
		for (File file : readfiles) {
			String fileString = CreditTransferOutwardBatchResponseFileProcessor.readFromFile(file);
			Object document = null;
			List list = null;
			String updateTB_TX_JNL = null;
			String updateTB_tX_JNL_ACTION = null;
			FpsMessageEnvelope fpsMsg = FFPHkiclMessageConverter.parseObject(fileString);
		    btchId = fpsMsg.getBtchInf().getBtchId();
			List<ISO20022BusinessDataV01> bizData = fpsMsg.getFpsPylds().getBizData();
			if (!(bizData.size() + "").equals(fpsMsg.getNbOfMsgs())) {
				System.out.println("not correct please retry...");
				return;
			}
			try {
				BusinessApplicationHeaderV01 head = (BusinessApplicationHeaderV01) bizData.get(0).getContent().get(0)
						.getValue();
				document = bizData.get(0).getContent().get(1).getValue();
				Connection loc_conn = ConnectionManager.getConn();
				if (document instanceof com.forms.ffp.adaptor.jaxb.iclfps.admi_002_001_01.Document) {
					MessageRejectV01 admi00200101 = ((com.forms.ffp.adaptor.jaxb.iclfps.admi_002_001_01.Document) document)
							.getAdmi00200101();
					String rjctgPtyRsn = admi00200101.getRsn().getRjctgPtyRsn();
					loc_conn.setAutoCommit(FALSE);
					updateTB_TX_JNL = " UPDATE TB_MSG_JNL SET MSG_TRANS_STATUS = ? WHERE MSG_TRAN_ID  = ? ";
					updateTB_tX_JNL_ACTION = " UPDATE TB_MSG_JNL_ACTION SET ACTION_TRANS_STATUS = ? WHERE MSG_TRAN_ID  = ? ";
					list = new ArrayList();
					list.add(REJ_FROM_ICL_O);
					String ref = ((com.forms.ffp.adaptor.jaxb.iclfps.admi_002_001_01.Document) document)
							.getAdmi00200101().getRltdRef().getRef();
					list.add(ref);
					EntityManager.update(loc_conn, updateTB_TX_JNL, list.toArray());
					list.clear();
					list.add(REJ_FROM_ICL_O);
					list.add(ref);
					EntityManager.update(loc_conn, updateTB_tX_JNL_ACTION, list.toArray());
					loc_conn.commit();
					loc_conn.close();
				} else if (document instanceof Document) {
					loc_conn.setAutoCommit(FALSE);
					String msgId = ((Document) document).getFIToFIPmtStsRpt().getOrgnlGrpInfAndSts().getOrgnlMsgId();
					XMLGregorianCalendar creDtTm = ((Document) document).getFIToFIPmtStsRpt().getGrpHdr().getCreDtTm();
					String orgnlMsgNmId = ((Document) document).getFIToFIPmtStsRpt().getOrgnlGrpInfAndSts().getOrgnlMsgNmId();
					List<PaymentTransaction801> txInfAndSts = ((Document)document).getFIToFIPmtStsRpt().getTxInfAndSts();
					for(PaymentTransaction801 tx:txInfAndSts){
						String orgnlEndToEndId = tx.getOrgnlEndToEndId();
						String orgnlTxId = tx.getOrgnlTxId();
						FPSTransactionStatusCode txSts = tx.getTxSts();
						String petry = tx.getStsRsnInf().getRsn().getPrtry();
						List<String> addtlInf2 = tx.getStsRsnInf().getAddtlInf();
						updateTB_TX_JNL = " UPDATE TB_MSG_JNL SET MSG_TRANS_STATUS = ? WHERE MSG_TRAN_ID  = ? ";
						updateTB_tX_JNL_ACTION = " UPDATE TB_MSG_JNL_ACTION SET ACTION_TRANS_STATUS = ? WHERE MSG_TRAN_ID  = ? ";
						list = new ArrayList();
						list.add(COMP_FROM_ICL_O);
						list.add(orgnlTxId);
						EntityManager.update(loc_conn, updateTB_TX_JNL, list.toArray());
						list.clear();
						list.add(COMP_FROM_ICL_O);
						list.add(orgnlTxId);
						EntityManager.update(loc_conn, updateTB_tX_JNL_ACTION, list.toArray());
						loc_conn.commit();
						loc_conn.close();
					}
				}
				
			} catch (Exception ip_ex) {
				ip_ex.printStackTrace();
			}
			ROOT root = new ROOT();
			FFPCTO01 body = new FFPCTO01();
			body.setFFPTransactionId(transctionId);
			body.setRejCd(prtry);
			body.setRejMsg(AddtlInf);
			body.setRsltCd("S");
			body.setSrcRefNm(btchId);
			root.setBODY(body);
			String parseAck2FFPAgent = FFPParticipantMessageAckConverter.parseAck2FFPAgent(root);
			// 发送给远程
			Socket s = new Socket(TO_IP, TO_PORT);
			BufferedWriter bufOut = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
			bufOut.write(parseAck2FFPAgent);
			bufOut.flush();
			s.close();
		}

	}

	public static List<File> readfiles(String filepath) throws FileNotFoundException, IOException {
		List<File> listFiles = new ArrayList();
		try {
			File file = new File(filepath);
			if (file.isDirectory()) {
				String[] filelist = file.list();
				for (int i = 0; i < filelist.length; i++) {
					File readfile = new File(filepath + "\\" + filelist[i]);
					listFiles.add(readfile);
				}
			}
		} catch (Exception e) {
		}
		return listFiles;
	}
}