package com.forms.batch.job.unit.participant.receivefile;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;

import com.forms.ffp.adaptor.jaxb.participant.request.BODY;
import com.forms.ffp.adaptor.jaxb.participant.request.ROOT;
import com.forms.ffp.adaptor.jaxb.participant.request.ffpcto01.FFPCTO01;
import com.forms.ffp.adaptor.jaxb.participant.request.head.HEAD;
import com.forms.ffp.core.define.FFPConstants;
import com.forms.ffp.core.define.FFPConstantsTxJnl;
import com.forms.ffp.core.msg.participant.FFPParticipantMessageConverter;
import com.forms.ffp.core.utils.FFPDateUtils;
import com.forms.ffp.core.utils.FFPIDUtils;
import com.forms.framework.log.BatchLogger;
import com.forms.framework.persistence.ConnectionManager;
import com.forms.framework.persistence.EntityManager;
import com.forms.framework.util.CommonAPI;

public class FFPReceiveFileServerThread implements Runnable
{

	private BatchLogger _logger = BatchLogger.getLogger("BATCH_LISTENER_SESSION", String.valueOf(Thread.currentThread().getId()), FFPReceiveFileServerThread.class);
	private int SO_TIME_OUT = 60000;
	private String jnlNo;
	private String transactionId;
	private String end2endId;
	private Timestamp createTs;
	private String seqNo;
	Socket socket = null;// 和本线程相关的Socket

	String outputPath = null;

	public FFPReceiveFileServerThread(Socket socket)
	{
		this.socket = socket;
	}

	@Override
	public void run()
	{
		/////// 初始化各种id//////////////////
		init();

		StringBuffer sb = new StringBuffer();
		ROOT root = null;
		try
		{
			// 与客户端建立通信，获取输入流，读取取客户端提供的信息
			socket.setSoTimeout(SO_TIME_OUT);
			BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());
			ByteArrayOutputStream bo = new ByteArrayOutputStream();
			byte[] buffer = new byte[1024];
			int length = 0;
			while ((length = bis.read(buffer)) != -1)
			{
				// 循环读取客户端的信息
				bo.write(buffer, 0, length);
			}
			byte[] databytes = bo.toByteArray();
			bo.close();

			String receiveStr = new String(databytes, CommonAPI.ENCODING_UTF_8);
			_logger.info("Requst msg:" + receiveStr);

			socket.shutdownInput();
			String xml = "";
			try
			{
				root = FFPParticipantMessageConverter.parseXml2RequestObject(sb.toString());
			} catch (Exception e)
			{
				_logger.error("parse error");
				sendSyncMessage("NACK");
				return;
			}
			try
			{
				xml = executeMessage(root);
				sendSyncMessage(xml);
			} catch (Exception e)
			{
				_logger.error("execute error");
				sendSyncMessage("NACK");
				return;
			}
			socket.close();
		} catch (IOException e)
		{
			e.printStackTrace();
		} finally
		{
			try
			{
				if (socket != null)
					socket.close();
			} catch (IOException e)
			{
				e.printStackTrace();
			}
		}
	}

	public void init()
	{
		jnlNo = FFPIDUtils.getJnlNo();
		transactionId = FFPIDUtils.getTransactionId();
		end2endId = FFPIDUtils.getEndToEndId();
		createTs = FFPDateUtils.getTimestamp(new Date());
		// seqNo = FFPIDUtils.getSeq();
		seqNo = "1";
	}

	public void sendSyncMessage(String str)
	{
		try
		{
			OutputStream os = socket.getOutputStream();
			os.write(str.getBytes(CommonAPI.ENCODING_UTF_8));
			os.flush();
			socket.shutdownOutput();
		} catch (Exception ip_e)
		{
			_logger.error(ip_e);
		}
	}

	public void save(ROOT root) throws Exception
	{
		HEAD head = root.getHEAD();
		FFPCTO01 body = (FFPCTO01) root.getBODY();
		String servcMode = body.getSrvcMode();

		String txState = FFPConstantsTxJnl.TX_STAT_APPST;
		String txType = "";
		String txCode = "";
		String txSrc = FFPConstants.TX_SOURCE_FFPAGENT;
		Timestamp lastUpdateTs = createTs;
		String msgFromType = FFPConstants.MSG_TYPE_AGENT;
		String msgFrom = head.getRequestID();
		String msg2Type = FFPConstants.MSG_TYPE_FFP;
		String msgTo = FFPConstants.MSG_CODE_FFP;
		String msgType = head.getMessageType();
		String msgStatus = FFPConstantsTxJnl.MSG_STAT_PROCE;
		Timestamp msgCreateData = createTs;
		Timestamp msgProceDate = createTs;
		Timestamp msgComplDate = createTs;

		Connection loc_conn = null;
		try
		{
			loc_conn = ConnectionManager.getInstance().getConnection();
			loc_conn.setAutoCommit(false);
			String sql_jnl = "insert into tb_tx_jnl value(?,?,?,?,?,?,?,?,?)";
			EntityManager.update(loc_conn, sql_jnl, jnlNo, txState, txType, txCode, txSrc, transactionId, end2endId, createTs, lastUpdateTs);

			String sql_action = "insert into tb_tx_jnlaction value(?,?,?,?,?,?,?,?,?,?,?,?)";
			EntityManager.update(loc_conn, sql_action, jnlNo, seqNo, head.getRequestRefno(), msgFromType, msgFrom, msg2Type, msgTo, msgType, msgStatus, msgCreateData, msgProceDate, msgComplDate);

			String sql_p100dat = "insert into tb_tx_p100dat value(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			EntityManager.update(loc_conn, sql_p100dat, jnlNo, body.getSrcRefNm(), body.getPymtCatPrps(), body.getAcctVerf(), body.getSettlCcy(), body.getSettlAmt(), body.getSettlDate(),
					body.getInstrCcy(), body.getInstrAmt(), body.getChrgrsAgent().getID(), body.getChrgrsAgent().getBICCODE(), body.getChrgrsCcy(), body.getChrgrsAmt(), body.getDbtrNm(),
					body.getDbtrAcNo(), body.getDbtrAcTp(), "", // DEBTOR_AGT_ID
					"", // DEBTOR_AGT_BIC
					body.getCdtrNm(), body.getCdtrAcNo(), body.getCdtrAcTp(), body.getCdtrAgent().getID(), body.getCdtrAgent().getBICCODE(), "", /// purpose_type
					"", /// purpose_code
					"", /// purpose_other
					"", servcMode);
			loc_conn.commit();
			loc_conn.close();
		} catch (Exception e)
		{
			e.printStackTrace();
		} finally
		{
			try
			{
				if (loc_conn != null)
					loc_conn.close();
			} catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
	}

	// 处理FFPCTO01 xml
	public String executeMessage(ROOT reqRoot) throws Exception
	{
		String xml = "NACK";
		HEAD reqHead = reqRoot.getHEAD();
		BODY reqbody = reqRoot.getBODY();
		if (reqbody instanceof FFPCTO01)
		{
			FFPCTO01 ffpcto01 = (FFPCTO01) reqbody;
			String servcMode = ffpcto01.getSrvcMode();
			switch (servcMode)
			{
			case "C1":
				com.forms.ffp.adaptor.jaxb.participant.response.ROOT root = new com.forms.ffp.adaptor.jaxb.participant.response.ROOT();
				com.forms.ffp.adaptor.jaxb.participant.response.head.HEAD head = new com.forms.ffp.adaptor.jaxb.participant.response.head.HEAD();
				com.forms.ffp.adaptor.jaxb.participant.response.ffpcto01.FFPCTO01 body = new com.forms.ffp.adaptor.jaxb.participant.response.ffpcto01.FFPCTO01();
				head.setRequestID(reqHead.getRequestID());
				head.setTransactionDate(reqHead.getTransactionDate());
				head.setTransactionTime(reqHead.getTransactionTime());
				head.setRequestRefno(reqHead.getRequestRefno());
				head.setAccountingDate("");
				head.setResponseID("28");
				head.setMessageType(reqHead.getMessageType());
				head.setSystemRefno("");
				head.setSystemBeginTIme("");
				head.setSystemEndTIme("");
				head.setResponseRefno(FFPIDUtils.getRefno());
				head.setResponseBeginTime("");
				head.setResponseEndTime("");
				head.setResponseStatus("N");
				head.setFinalNode("2");
				head.setSystemMessageCode("");
				head.setResponseMessageCode("");
				head.setResponseMessage("");
				body.setSrcRefNm(ffpcto01.getSrcRefNm());
				body.setFFPTransactionId(transactionId);
				body.setRsltCd("R");
				body.setRejCd("");
				body.setRejMsg("");
				root.setHEAD(head);
				root.setBODY(body);
				xml = FFPParticipantMessageConverter.packageReponseObject2Xml(root);
				break;
			case "C2":
				save(reqRoot);
				xml = "ACK";
				break;
			case "C3":
				save(reqRoot);
				xml = "ACK";
				break;
			default:
				xml = "NACK";
				break;
			}
		}
		return xml;
	}
}
