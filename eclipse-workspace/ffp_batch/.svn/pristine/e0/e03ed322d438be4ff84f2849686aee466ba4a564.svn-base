package com.forms.batch.job.unit.transactioncheck;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.forms.ffp.core.define.FFPConstantsTxJnl;
import com.forms.framework.BatchBaseJob;
import com.forms.framework.exception.BatchJobException;
import com.forms.framework.persistence.ConnectionManager;
import com.forms.framework.persistence.EntityManager;

public class BatchTransactionCheckProcessor extends BatchBaseJob {
	private static String CHARACTER_ENCODING = "UTF-8";
	private static Connection conn;

	public void init() throws BatchJobException {
		conn = null;
	}

	@Override
	public boolean execute() throws BatchJobException {
		// TODO Auto-generated method stub
		try {

			if (conn == null) {
				conn = ConnectionManager.getInstance().getConnection();
				this.batchLogger.info("Database Is Connected");
			}

			ArrayList<String> errorCIDList = checkDataBetweenDataTableAndTempTable();
			if (errorCIDList == null || errorCIDList.size() > 0) {
				// send email to notify managers
				for (int i = 0; i < errorCIDList.size(); i++) {
					this.batchLogger.error(String.format("Error occurred CID=%s", errorCIDList.get(i)));
				}
			} else {
				
				createEndFile();
			}

			return true;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			this.batchLogger.error(e.getMessage());
			return false;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			this.batchLogger.error(e.getMessage());
			return false;
		} finally {
			if (conn == null) {
				try {
					conn.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					this.batchLogger.error(e.getMessage());
				}
				this.batchLogger.info("Database Is Closed");
			}
		}
	}

	// Check Data Between DataTable And TempTable
	private ArrayList<String> checkDataBetweenDataTableAndTempTable() throws Exception {
		this.batchLogger.info("Start to Check Data Between DataTable And TempTable");

		ArrayList<String> errCIDList = new ArrayList<>();

		// query tb_tx_check_temp
		this.batchLogger.info(String.format("Start To SELECT * FROM tb_tx_check_temp WHERE CHECK_STATUS = %s", "I"));
		String query_tb_tx_check_temp_sql = "SELECT * FROM tb_tx_check_temp WHERE CHECK_STATUS = ? ";
		ArrayList<Object> query_tb_tx_check_temp_list = new ArrayList<>();
		query_tb_tx_check_temp_list.add("I");
		List<Map<String, Object>> query_tb_tx_check_temp_map_list = EntityManager.queryMapList(conn,
				query_tb_tx_check_temp_sql, query_tb_tx_check_temp_list.toArray());
		this.batchLogger.info(String.format("Finsh SELECT * FROM tb_tx_check_temp WHERE CHECK_STATUS = %s", "I"));

		// Query jnl_action_p100dat And Update tb_tx_check_temp
		String query_jnl_action_p100dat_sql = "SELECT tb_tx_jnl.*, tb_tx_jnlaction.*, tb_tx_p100dat.* " + "FROM "
				+ "tb_tx_jnl " + "INNER JOIN tb_tx_jnlaction ON tb_tx_jnl.JNL_NO = tb_tx_jnlaction.JNL_NO "
				+ "INNER JOIN tb_tx_p100dat ON tb_tx_jnl.JNL_NO = tb_tx_p100dat.JNL_NO "
				+ "WHERE tb_tx_jnl.TX_STAT = ? " + "AND tb_tx_jnlaction.MSG_ID = ? "
				+ "AND tb_tx_jnlaction.MSG_FROM = ? " + "AND tb_tx_jnlaction.MSG_TO = ? "
				+ "AND tb_tx_jnlaction.MSG_TYPE = ? ";
		for (int i = 0; i < query_tb_tx_check_temp_map_list.size(); i++) {
			Map<String, Object> query_tb_tx_check_temp_map = query_tb_tx_check_temp_map_list.get(i);

			try {
				// query request data
				this.batchLogger.info(String.format("Start To Query Request Data FROM jnl_action_p100dat, CID=%s", (String)query_tb_tx_check_temp_map.get("CID")));
				ArrayList<String> query_jnl_action_p100dat_req_list = new ArrayList<>();

				if (((String) (query_tb_tx_check_temp_map.get("RESPONSE_STATUS"))).equals("N")) {
					query_jnl_action_p100dat_req_list.add(FFPConstantsTxJnl.TX_STATUS.TX_STAT_COMPL.getStatus());
				} else if (((String) (query_tb_tx_check_temp_map.get("RESPONSE_STATUS"))).equals("E")) {
					query_jnl_action_p100dat_req_list.add(FFPConstantsTxJnl.TX_STATUS.TX_STAT_UNHANDLE.getStatus());
				}

				query_jnl_action_p100dat_req_list.add((String) query_tb_tx_check_temp_map.get("REQUEST_REF_NO"));

				query_jnl_action_p100dat_req_list.add((String) query_tb_tx_check_temp_map.get("REQUEST_ID"));

				query_jnl_action_p100dat_req_list.add((String) query_tb_tx_check_temp_map.get("RESPONSE_ID"));

				query_jnl_action_p100dat_req_list.add((String) query_tb_tx_check_temp_map.get("MESSAGE_TYPE"));

				List<Map<String, Object>> query_jnl_action_p100dat_req_map = EntityManager.queryMapList(conn,
						query_jnl_action_p100dat_sql, query_jnl_action_p100dat_req_list.toArray());
				this.batchLogger.info(String.format("Finish Querying Request Data FROM jnl_action_p100dat, CID=%s", (String)query_tb_tx_check_temp_map.get("CID")));

				// query response data
				this.batchLogger.info(String.format("Start To Query Response Data FROM jnl_action_p100dat, CID=%s", (String)query_tb_tx_check_temp_map.get("CID")));
				ArrayList<String> query_jnl_action_p100dat_res_list = new ArrayList<>();

				if (((String) (query_tb_tx_check_temp_map.get("RESPONSE_STATUS"))).equals("N")) {
					query_jnl_action_p100dat_res_list.add(FFPConstantsTxJnl.TX_STATUS.TX_STAT_COMPL.getStatus());
				} else if (((String) (query_tb_tx_check_temp_map.get("RESPONSE_STATUS"))).equals("E")) {
					query_jnl_action_p100dat_res_list.add(FFPConstantsTxJnl.TX_STATUS.TX_STAT_UNHANDLE.getStatus());
				}

				query_jnl_action_p100dat_res_list.add((String) query_tb_tx_check_temp_map.get("RESPONSE_REF_NO"));

				query_jnl_action_p100dat_res_list.add((String) query_tb_tx_check_temp_map.get("RESPONSE_ID"));

				query_jnl_action_p100dat_res_list.add((String) query_tb_tx_check_temp_map.get("REQUEST_ID"));

				query_jnl_action_p100dat_res_list.add((String) query_tb_tx_check_temp_map.get("MESSAGE_TYPE"));

				List<Map<String, Object>> query_jnl_action_p100dat_res_map = EntityManager.queryMapList(conn,
						query_jnl_action_p100dat_sql, query_jnl_action_p100dat_res_list.toArray());
				this.batchLogger.info(String.format("Finish Querying Response Data FROM jnl_action_p100dat, CID=%s", (String)query_tb_tx_check_temp_map.get("CID")));

				String checkStatus = "I";
				if (query_jnl_action_p100dat_req_map == null || query_jnl_action_p100dat_res_map == null) {
					errCIDList.add((String) query_tb_tx_check_temp_map.get("CID"));
					checkStatus = "E";
				} else
					if (query_jnl_action_p100dat_req_map.size() == 1 && query_jnl_action_p100dat_res_map.size() == 1) {
					checkStatus = "S";
				} else {
					errCIDList.add((String) query_tb_tx_check_temp_map.get("CID"));
					checkStatus = "E";
				}

				// update checkStatus
				this.batchLogger.info(String.format("Start To Update tb_tx_check_temp.CHECK_STATUS, CID=%s, CHECK_STATUS=%s", (String)query_tb_tx_check_temp_map.get("CID"), checkStatus));
				String update_tb_tx_check_temp_sql = "UPDATE tb_tx_check_temp SET CHECK_STATUS = ? where CID = ?";
				conn.setAutoCommit(false);
				this.batchLogger.info("Database Transaction Open");
				ArrayList<String> update_tb_tx_check_temp_list = new ArrayList<>();

				update_tb_tx_check_temp_list.add(checkStatus);
				update_tb_tx_check_temp_list.add((String) (query_tb_tx_check_temp_map.get("CID")));
				EntityManager.update(conn, update_tb_tx_check_temp_sql, update_tb_tx_check_temp_list.toArray());
				conn.commit();
				this.batchLogger.info("Database Transaction Commit");
				this.batchLogger.info(String.format("Finish Updating tb_tx_check_temp.CHECK_STATUS, CID=%s, CHECK_STATUS=%s", (String)query_tb_tx_check_temp_map.get("CID"), checkStatus));
			} catch (Exception e) {
				this.batchLogger.error(e.getMessage());
			}

		}

		this.batchLogger.info(
				String.format("Finish Check Data Between DataTable And TempTable, errorCount=%d", errCIDList.size()));

		return errCIDList;
	}
	
	private void createEndFile() throws IOException{
		File recordFile = new File(this.batchData + this.actionElement.element("parameters").elementText("local-path") + this.actionElement.element("parameters").elementText("record-fileName"));
		
		if(!recordFile.exists()){
			throw new IOException(String.format("File(%s) Not Found!", recordFile));
		}
		
		BufferedInputStream bis = new BufferedInputStream(new FileInputStream(recordFile));
		byte[] resultArr = new byte[]{};
		byte[] mesBuffer = new byte[1024];
		int count = 0;
		while ((count = bis.read(mesBuffer)) != -1) {
			byte[] tempArr = new byte[resultArr.length];
			System.arraycopy(resultArr, 0, tempArr, 0, resultArr.length);
			resultArr = new byte[tempArr.length + count];
			System.arraycopy(tempArr, 0, resultArr, 0, tempArr.length);
			System.arraycopy(mesBuffer, 0, resultArr, tempArr.length, count);
		}
		
		if(bis != null){
			bis.close();
		}
		
		String fileName = new String(resultArr, CHARACTER_ENCODING);
		
		String[] fileNameSplitArr = fileName.split("\\.");
		StringBuilder fileNameBuilder = new StringBuilder();
		for (int i = 0; i < fileNameSplitArr.length; i++) {
			if (i == fileNameSplitArr.length - 1) {
				fileNameBuilder.append("_end." + fileNameSplitArr[i]);
			} else {
				fileNameBuilder.append(fileNameSplitArr[i]);
			}
		}
		new File(fileNameBuilder.toString()).createNewFile();
		this.batchLogger.info(String.format("Creat A Success File %s", fileNameBuilder.toString()));

	}

}
