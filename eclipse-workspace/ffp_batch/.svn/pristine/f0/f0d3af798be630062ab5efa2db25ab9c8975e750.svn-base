package com.forms.batch.job.unit.iclfps.payment;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.forms.ffp.adaptor.jaxb.participant.request.ROOT;
import com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.FFPCTI01;
import com.forms.ffp.adaptor.jaxb.participant.request.head.HEAD;
import com.forms.ffp.core.define.FFPConstantsTxJnl;
import com.forms.ffp.core.define.FFPStatus;
import com.forms.ffp.core.exception.FFPErrorLevel;
import com.forms.ffp.core.exception.FFPSystemException;
import com.forms.ffp.core.exception.FFPTeErrorMsg;
import com.forms.ffp.core.msg.FFPAdaptorMgr;
import com.forms.ffp.core.msg.participant.FFPParticipantMessageConverter;
import com.forms.ffp.core.msg.participant.busi.FFP_CTI01_OVO;
import com.forms.ffp.core.utils.FFPDateUtils;
import com.forms.ffp.core.utils.FFPIDUtils;
import com.forms.ffp.persistents.bean.FFPTxJnl;
import com.forms.ffp.persistents.bean.payment.credittransfer.FFPJbP100;
import com.forms.framework.BatchBaseJob;
import com.forms.framework.exception.BatchJobException;
import com.forms.framework.log.BatchLogger;
import com.forms.framework.persistence.ConnectionManager;

public class PaymentConfirmationInwardProcessor extends BatchBaseJob
{
	private static final Class<PaymentConfirmationInwardProcessor> CLASS_NAME = PaymentConfirmationInwardProcessor.class;
	private static final String ERROR_CODE = FFPTeErrorMsg.getErrorCode(CLASS_NAME, 0);
	private BatchLogger _logger = BatchLogger.getLogger(this.jobName, this.actionName, PaymentConfirmationInwardProcessor.class);
	
	private static SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
	
	private static int BATCH_SIZE = 500;
	
	@Override
	public boolean execute() throws BatchJobException
	{
		try
		{
			this.processor();
			return true;
		}
		catch(Exception ip_e)
		{
			throw new BatchJobException(ip_e);
		}
	}
	
	private void processor() throws Exception
	{
		_logger.info("Started processor inward batch file");
		
		//List<com.forms.ffp.adaptor.jaxb.iclfps.pacs_008_001_06.Document> pacs008list = new ArrayList<com.forms.ffp.adaptor.jaxb.iclfps.pacs_008_001_06.Document>();
		FFPAdaptorMgr ffpMgr = FFPAdaptorMgr.getInstance();
		Connection con = null;
		String batchId = null;//each batch time have the same batch id in all batch files
		
		try
		{
			//Get FFP Batch DB configuration, DB manager
			con = ConnectionManager.getInstance().getConnection();
			
			//check FFP Agent status, CUT OFF/ON
			
			Map<String, FFPJbP100> p100DataMap = new HashMap<String, FFPJbP100>();
			List<FFPJbP100> FFPJbP100List = getTempData(con, batchId);
			//6.persistent inward credit transfer data to transaction table
			savePacs008Data(con, FFPJbP100List, p100DataMap);//
			
			//7.Send data to Participant----Synchronous
			Iterator<String> ffpJnlNoIt = p100DataMap.keySet().iterator();
			while(ffpJnlNoIt.hasNext())
			{
				String ffpJnlNo = ffpJnlNoIt.next();
				FFPJbP100 singlePacs008TxInfo = p100DataMap.get(ffpJnlNo);
				String ffpRequestMessage = generateMsgToAgent(ffpJnlNo, singlePacs008TxInfo);
				
				
				_logger.info(String.format("FFP to Agent request message: %s", ffpRequestMessage));
				
				FFP_CTI01_OVO reply = null;
				//retry three times for FFP Agent response
				int retryCount = 0;
				while(retryCount++ < 3)
				{
					try
					{
						reply = ffpMgr.sendTcpMsg(ffpRequestMessage);//send list message?
						if(reply != null)
						{
							break;
						}
					}
					catch(Exception ex)
					{
						_logger.info(String.format("Call FFP Agent fail.[%s]. Retry count[%s]", ex.toString(), retryCount));
					}
				}
				
				//8.Synchronously update FFP DB status according to the response message
				if(reply != null)
				{
					
					//a.update tb_tx_jnl status = COMP
					//b.update tb_p100 status = R/S According agent return status
					_logger.info(String.format("Update FFP Transaction Final status[%s] and Credit Transfer Status[%s] with Source Reference number[%s]", 
														FFPConstantsTxJnl.TX_STAT_COMPL, reply.getRsltCd(), reply.getSrcRefNm()));
					updateResultSts(con, FFPConstantsTxJnl.TX_STAT_COMPL, reply.getSrcRefNm(), reply.getRsltCd(), reply.getRejCd(), reply.getRejMsg());
					//_logger.info(String.format("Update FFP credit transfer status from FFP Agent with source reference number[%s]", reply.getSrcRefNm()));
					
				}
				else
				{
					//a.update tb_tx_jnl status = TMOUT
					//b.update tb_p100 status = T
					_logger.info(String.format("Update FFP Transaction Final status[%s] and Credit Transfer Status[%s] with Source Reference number[%s]", 
														FFPConstantsTxJnl.MSG_STAT_TMOUT, FFPStatus.P100_STATUS.TENDING.getCode(), singlePacs008TxInfo.getSrcRefNm()));
					updateResultSts(con, FFPConstantsTxJnl.MSG_STAT_TMOUT, singlePacs008TxInfo.getSrcRefNm(), FFPStatus.P100_STATUS.TENDING.getCode(), null, null);
					//_logger.info(String.format("Update FFP credit transfer status not with response message from Agent by FFP tx_jnl[%s]", ffpJnlNo));
				}
			}
			_logger.info("Ended processor inward batch file");
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			_logger.error("Process inward file error", ex);
			throw new BatchJobException(ex);
		}
		finally
		{
			//close connection
			if(con != null)
				con.close();
		}
	}
	
	private void updateResultSts(Connection con, String status, String refNum, String p100_status, String p100_rej_code, String p100_rej_reason) throws Exception
	{
		//String sql = "UPDATE TB_TX_JNL SET TX_STAT = ?, LAST_UPDATE_TS = ? WHERE JNL_NO = ?";
		String sql = "UPDATE TB_TX_JNL JNL JOIN TB_TX_P100DAT P100 "	+ 
					 "ON JNL.JNL_NO = P100.JNL_NO " + 
					 "SET JNL.TX_STAT = ?, JNL.LAST_UPDATE_TS = ? , P100.STATUS = ?, P100.REJ_CODE = ?, P100.REJ_REASON = ? " + 
					 "WHERE P100.SRC_REF_NM = ?";
		PreparedStatement pstm = null;
		try
		{
			pstm = con.prepareStatement(sql);
			pstm.setString(1, status);
			pstm.setTimestamp(2, new java.sql.Timestamp(new Date().getTime()));
			pstm.setString(3, p100_status);
			pstm.setString(4, p100_rej_code);
			pstm.setString(5, p100_rej_reason);
			pstm.setString(6, refNum);
			
			pstm.executeUpdate();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			con.rollback();
			_logger.error(String.format("Update status[%s] with source reference number[%s] failed", status, refNum), ex);
		}
		finally
		{
			if(pstm != null)
				pstm.close();
		}
	}
	//query pacs008 data form temp table, according to batch_id for each batch times
	private List<FFPJbP100> getTempData(Connection con, String batchId) throws FFPSystemException, Exception
	{
		final String METHOD_NAME = "getTempData()";
		String sql = "SELECT * FROM TB_INWARD_DATA WHERE BATCH_ID = ? AND MSG_INST_DATE = ? AND STAUTS = ? ";
		PreparedStatement pstm = null;
		ResultSet rs = null;
		List<FFPJbP100> list = new ArrayList<FFPJbP100>();
		try
		{
			pstm = con.prepareStatement(sql);
			pstm.setString(1, batchId);
			pstm.setDate(2, new java.sql.Date((new Date()).getTime()));
			//add status parameter for some data has processed(status = F)
			pstm.setString(3, FFPStatus.TEMP_CREDIT_STATUS.INWARD_INITATE.getCode());
			
			rs = pstm.executeQuery();
			while(rs.next())
			{
				FFPJbP100 ctInfo = new FFPJbP100();
				FFPTxJnl txJnl = new FFPTxJnl();
				txJnl.setTransactionId(rs.getString("TRANSACTION_ID"));
				txJnl.setEndToEndId(rs.getString("END_TO_END_ID"));
				
				ctInfo.setTxJnl(txJnl);
				ctInfo.setSrcRefNm(rs.getString("ID"));//just use this field to save temporary id
				ctInfo.setPymtCatPrps(rs.getString("CATEGORY_PURPOSE"));
				ctInfo.setAccountVerification(rs.getString("ACCT_VERF"));
				ctInfo.setSettlementAmount(new BigDecimal(rs.getString("SETTLEMENT_AMT")));
				ctInfo.setSettlementCurrency(rs.getString("SETTLEMENT_CUR"));
				ctInfo.setSettlementDate(rs.getDate("SETTLEMENT_DATE"));
				ctInfo.setInstructedCurrency(rs.getString("INSTRUCTED_CUR"));
				ctInfo.setInstructedAmount(rs.getString("INSTRUCTED_AMT") != null ? new BigDecimal(rs.getString("INSTRUCTED_AMT")) : null);
				ctInfo.setChargersAgentId(rs.getString("CHG_AGT_ID"));
				ctInfo.setChargersAgentBic(rs.getString("CHG_AGT_BIC"));
				ctInfo.setChargersCurrency(rs.getString("CHG_CUR"));
				ctInfo.setChargersAmount(rs.getString("CHG_AMT") != null ? new BigDecimal(rs.getString("CHG_AMT")) : null);
				ctInfo.setDebtorName(rs.getString("DEBTOR_NAME"));
				ctInfo.setDebtorAccountNumber(rs.getString("DEBTOR_ACCTNO"));
				ctInfo.setDebtorAccountNumberType(rs.getString("DEBTOR_ACCTNO_TYPE"));
				ctInfo.setDebtorAgentId(rs.getString("DEBTOR_AGT_ID"));
				ctInfo.setDebtorAgentBic(rs.getString("DEBTOR_AGT_BIC"));
				ctInfo.setCreditorName(rs.getString("CREDITOR_NAME"));
				ctInfo.setCreditorAccountNumber(rs.getString("CREDITOR_ACCTNO"));
				ctInfo.setCreditorAccountNumberType(rs.getString("CREDITOR_ACCTNO_TYPE"));
				ctInfo.setCreditorAgentId(rs.getString("CREDITOR_AGT_ID"));
				ctInfo.setCreditorAgentBic(rs.getString("CREDITOR_AGT_BIC"));
				ctInfo.setPaymentPurposeType(rs.getString("PURPOSE_TYPE"));
				ctInfo.setPaymentPurposeCd(rs.getString("PURPOSE_CODE"));
				ctInfo.setPaymentPurposeProprietary(rs.getString("PURPOSE_OTHER"));
				ctInfo.setRemittanceInformation(rs.getString("REMIT_INFO"));
				ctInfo.setSrvcMode(rs.getString("BIZ_SVC_TYPE"));
				
				list.add(ctInfo);
			}
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			_logger.error(String.format("Failed to get file data from temporary table with batchId[%s]", batchId), ex);
			//throw new FFPDBException(String.format("Failed to get file data from temporary table with batchId[%s]", batchId), ex);
			throw new FFPSystemException(
					ERROR_CODE,
					CLASS_NAME.getName() + "->" + METHOD_NAME, 
					ex.getMessage(), 
					FFPErrorLevel.ERR_LEVEL_ERRO, 
					ex);
		}
		finally
		{
			if(rs != null) rs.close();
			if(pstm != null) pstm.close();
		}
		return list;
	}
	
	private String generateMsgToAgent(String jnl_no, FFPJbP100 txInfo)
	{
		String message = null;
		ROOT root = new ROOT();
			
		HEAD head = new HEAD();
			
		head.setRequestID("03");
		head.setTransactionDate(FFPDateUtils.getDateStr(new Date(), FFPDateUtils.INT_DATE_FORMAT));
		head.setTransactionTime(FFPDateUtils.getTimeStr(FFPDateUtils.getTime(new Date()), FFPDateUtils.INT_TIME_FORMAT));
		head.setRequestRefno(FFPIDUtils.getRequestRefno());//Request ref ID of head
		head.setAccountingDate(FFPDateUtils.getDateStr(new Date(), FFPDateUtils.INT_DATE_FORMAT));
			
		root.setHEAD(head);
			
		FFPCTI01 body = new FFPCTI01();
		body.setSrcRefNm(txInfo.getSrcRefNm());//
		body.setSettlDate(txInfo.getSettlementDate() != null ? format1.format(txInfo.getSettlementDate()) : null);//NullPointerException
		body.setSettlAmt(txInfo.getSettlementAmount());
		body.setSettlCcy(txInfo.getSettlementCurrency());
			
		body.setCdtrNm(txInfo.getCreditorName());
		body.setCdtrAcTp(txInfo.getCreditorAccountNumberType());
		body.setCdtrAcNo(txInfo.getCreditorAccountNumber());
		body.setCdtrContPhone(txInfo.getCdtrContPhone());
		body.setCdtrContEmailAddr(txInfo.getCdtrContEmailAddr());
		body.setPytPurp(txInfo.getPymtCatPrps());
		body.setRemInfo(txInfo.getRemittanceInformation());
		root.setBODY(body);
			
		try 
		{
			message = FFPParticipantMessageConverter.packageRequestObject2Xml(root);
		} 
		catch (Exception e)
		{
			_logger.error(String.format("Error on generating Inward credit transfer request message[FFP Credit Transfer jnl_no:%s]", jnl_no));
			//update DB status for retry?
			e.printStackTrace();
		}
	
		return message;
	}
	
	private void savePacs008Data(Connection conn, List<FFPJbP100> FFPJbP100List, Map<String, FFPJbP100> tx_p100) throws FFPSystemException, Exception
	{
		final String METHOD_NAME = "savePacs008Data()";
		//a. p100,generate Jnl No.
		//b. tb_tx_jnl
		//c. update temporary status = F after success
		//d. map remove this data
		//Map<String, FFPMsgVO_Pacs008_CdtTrfTxInf> map = new HashMap<String, FFPMsgVO_Pacs008_CdtTrfTxInf>();
		PreparedStatement pstm = null;
		PreparedStatement pstm2 = null;
		PreparedStatement pstm3 = null;
		String jnl_sql = "INSERT INTO TB_TX_JNL VALUES (?, ?, ?, ?, ?, ?, ?)";
		//Add refNo, status, reject_code, reject_reason
		String p100_sql = "INSERT INTO TB_TX_P100DAT VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		String inward_sql = "UPDATE TB_INWARD_DATA SET STATUS = ?, LAST_MODI_DATE = ? WHERE ID = ? AND STATUS = ?";
		//List<String> tempRefList = new ArrayList<String>();
		int count = 0;
		try 
		{
			conn.setAutoCommit(false);
			//Insert
			pstm = conn.prepareStatement(jnl_sql);
			pstm2 = conn.prepareStatement(p100_sql);
			pstm3 = conn.prepareStatement(inward_sql);	
			for(FFPJbP100 txInf : FFPJbP100List)
			{
				count ++;
				int i = 1;
				String ref_no = FFPIDUtils.getSrcRefNm();
				String ffp_jnl_no = FFPIDUtils.getJnlNo();
				FFPTxJnl txJnl = txInf.getTxJnl();	
				tx_p100.put(ffp_jnl_no, txInf);
				//tempRefList.add(txInf.getSrcRefNm());
				txInf.setSrcRefNm(ref_no);//for send message to agent
				pstm.setString(1, ffp_jnl_no);//generate FFP->FFP Agent Jnl_no
				pstm.setString(2, FFPConstantsTxJnl.TX_STAT_CREAT);
				pstm.setString(3, "FFP");
				pstm.setString(4, txJnl.getTransactionId());
				pstm.setString(5, txJnl.getEndToEndId());
				pstm.setTimestamp(6, new java.sql.Timestamp(new Date().getTime()));
				pstm.setTimestamp(7, new java.sql.Timestamp(new Date().getTime()));
				pstm.addBatch();
						
				pstm2.setString(i++, ffp_jnl_no);
				pstm2.setString(i++,  ref_no);//ref Num for Agent
				pstm2.setString(i++, FFPStatus.P100_STATUS.INITATE.getCode());//status
				pstm2.setString(i++, null);//Reject code
				pstm2.setString(i++, null);//Reject reason
				pstm2.setString(i++, txInf.getPymtCatPrps());
				pstm2.setString(i++, txInf.getAccountVerification());
				pstm2.setString(i++, txInf.getSettlementCurrency());
				pstm2.setString(i++, txInf.getSettlementAmount() != null ? String.valueOf(txInf.getSettlementAmount()) : null);
				pstm2.setTimestamp(i++, new java.sql.Timestamp(txInf.getSettlementDate().getTime()));
				pstm2.setString(i++, txInf.getInstructedCurrency());
				pstm2.setString(i++, txInf.getInstructedAmount() != null ? String.valueOf(txInf.getInstructedAmount()) : null);
				pstm2.setString(i++, null);		//charge info
				pstm2.setString(i++, null);
				pstm2.setString(i++, null);
				pstm2.setString(i++, null);
				pstm2.setString(i++, txInf.getDebtorName());
				pstm2.setString(i++, txInf.getDebtorAccountNumber());
				pstm2.setString(i++, txInf.getDebtorAccountNumberType());
				pstm2.setString(i++, txInf.getDebtorAgentId());//
				pstm2.setString(i++, txInf.getDebtorAgentBic());
				pstm2.setString(i++, txInf.getCreditorName());
				pstm2.setString(i++, txInf.getCreditorAccountNumber());
				pstm2.setString(i++, txInf.getCreditorAccountNumberType());
				pstm2.setString(i++, txInf.getCreditorAgentId());
				pstm2.setString(i++, txInf.getCreditorAgentBic());
				pstm2.setString(i++, txInf.getPaymentPurposeType());
				pstm2.setString(i++, txInf.getPaymentPurposeCd());
				pstm2.setString(i++, txInf.getPaymentPurposeProprietary());
				pstm2.setString(i++, txInf.getRemittanceInformation());		//remittance info
				pstm2.setString(i++, txInf.getSrvcMode());//business service type
				pstm2.addBatch();
				
				pstm3.setString(1, FFPStatus.TEMP_CREDIT_STATUS.INWARD_FINISH.getCode());
				pstm3.setTimestamp(2, new java.sql.Timestamp(new Date().getTime()));	
				pstm3.setString(3, txInf.getSrcRefNm());
				pstm3.setString(4, FFPStatus.TEMP_CREDIT_STATUS.INWARD_INITATE.getCode());
				pstm3.addBatch();
				
				if(count % BATCH_SIZE == 0)
				{
					pstm.executeBatch();
					pstm.clearBatch();
							
					pstm2.executeBatch();
					pstm2.clearBatch();
					
					pstm3.executeBatch();
					pstm3.clearBatch();
				}
			}
			pstm.executeBatch();
			pstm2.executeBatch();
			pstm3.executeBatch();
				
			conn.commit();
			conn.setAutoCommit(true);
		}
		catch (Exception ex) 
		{
			ex.printStackTrace();
			_logger.error("Copy credit transfer data from temporary table of SQL execute batch failed", ex);
			if(conn != null) conn.close();
			throw new FFPSystemException(
					ERROR_CODE,
					CLASS_NAME.getName() + "->" + METHOD_NAME, 
					ex.getMessage(), 
					FFPErrorLevel.ERR_LEVEL_ERRO, 
					ex);
			//update temporary table data 
			/*StringBuilder sb = new StringBuilder("UPDATE TB_INWARD_DATA SET STATUS = ?, LAST_MODI_DATE = ? WHERE ID IN(");
			for(int i= 1; i <= tempRefList.size(); i++)
			{
				sb.append(tempRefList.get(i - 1));
				if(i < tempRefList.size()) sb.append(",");
			}
			sb.append(")");
			PreparedStatement pst = null;
			try {
				pst = conn.prepareStatement(sb.toString());
				pst.setString(1, CREDIT_STATUS.INWARD_TEMP_ERROR.getCode());
				pst.setTimestamp(2, new java.sql.Timestamp(new Date().getTime()));	
				
				pst.executeUpdate();
				
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			finally
			{
				if(pst != null)
				{
					try {
						pst.close();
					} catch (SQLException e1) {
						e1.printStackTrace();
					}
				}
			}*/
		}
		finally
		{
			if(pstm != null) pstm.close();
			if(pstm2 != null) pstm2.close();
			if(pstm3 != null) pstm3.close();
		}
	}
}
