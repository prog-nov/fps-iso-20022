package com.forms.ffp.core.msg.participant;

import java.io.StringReader;
import java.io.StringWriter;
import java.util.Date;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.PropertyException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.ValidationEvent;
import javax.xml.bind.ValidationEventHandler;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.InputSource;

import com.forms.ffp.adaptor.define.FFPJaxbConstants;
import com.forms.ffp.adaptor.jaxb.iclfps.fps_envelope_01.FpsMessageEnvelope;
import com.forms.ffp.adaptor.jaxb.participant.response.ROOT;
import com.forms.ffp.adaptor.jaxb.participant.response.ffpcti01.FFPCTI01;
import com.forms.ffp.adaptor.jaxb.participant.response.ffpcto01.FFPCTO01;
import com.forms.ffp.adaptor.jaxb.participant.response.head.HEAD;
import com.forms.ffp.adaptor.jaxb.participant.response.head.ObjectFactory;
import com.forms.ffp.adaptor.prefix.FFPIclfpsMsgNamespacePrefixMapper;
import com.forms.ffp.adaptor.xml.writer.FFPCDataXMLStreamWriter;
import com.forms.ffp.core.utils.FFPDateUtils;
import com.forms.ffp.core.utils.FFPIDUtils;
import com.sun.xml.internal.txw2.output.IndentingXMLStreamWriter;
/**
 * 
 * @author yrd
 *
 */
public class FFPTcpParticipantMessageConverter {

	private static Logger _logger = LoggerFactory.getLogger(FFPTcpParticipantMessageConverter.class);
	
	public static ROOT parseObject(String message) throws Exception
	{
		Unmarshaller unmarshaller = null;
		try
		{
			String str = message.toString();
			int length = str.length();
			System.out.println("length:"+length);
			int leng = Integer.valueOf(str.substring(0, 8));
			int start = str.indexOf('<');
			str = str.substring(start, leng);
			
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			InputSource is = new InputSource();
			is.setCharacterStream(new StringReader(str));
			Document doc = db.parse(is);
			
			Node headDoc = doc.getElementsByTagName("HEAD").item(0);
			JAXBContext con = JAXBContext.newInstance(HEAD.class);
			unmarshaller = con.createUnmarshaller();
			JAXBElement<HEAD> headElement = unmarshaller.unmarshal(headDoc, HEAD.class);
			HEAD head = headElement.getValue();
			
			Node bodyDoc = doc.getElementsByTagName("BODY").item(0);
			String packageName = FFPJaxbConstants.JAXB_CONTEXT_PACKAGE_PARTICIPANT_RESPONSE + "." + head.getMessageType().toLowerCase();
			
			con = JAXBContext.newInstance(packageName);
			unmarshaller = con.createUnmarshaller();
			JAXBElement<?> bodyElement = (JAXBElement<?>)unmarshaller.unmarshal(bodyDoc);
			Object object = bodyElement.getValue();

			ROOT root = new ROOT();
			root.setHEAD(head);
			root.setBODY(object);
			return root;
		}catch (JAXBException e)
		{
			Object displayExpt = e;
			if (e.getLinkedException() != null)
			{
				displayExpt = e.getLinkedException();
			}

			_logger.error(String.format("unmarshal %s: %s", new Object[] { displayExpt.getClass().getSimpleName(), ((Throwable) displayExpt).getMessage() }));
			e.printStackTrace();
			throw new RuntimeException(String.format("%s: %s", new Object[] { displayExpt.getClass().getSimpleName(), ((Throwable) displayExpt).getMessage() }));
		} catch (Exception arg25)
		{
			_logger.error("unmarshal Exception: " + arg25.getMessage());
			arg25.printStackTrace();
			throw new RuntimeException(String.format("Exception: %s", new Object[] { arg25.getMessage() }));
		}
	}
	
	//拼装应答报文,并转成String类型
	//参数：
	public static String parseXml2FFPAgent(Object obj) throws Exception{
		
		String message = null;
		
		if(obj instanceof com.forms.ffp.adaptor.jaxb.participant.request.ROOT){
			//request
			com.forms.ffp.adaptor.jaxb.participant.request.ROOT root = (com.forms.ffp.adaptor.jaxb.participant.request.ROOT)obj;
			message = packageXml(root);
		}else if(obj instanceof ROOT){
			//response
			ROOT root = (ROOT)obj;
			message = packageXml(root);
		}else{
			
		}
		return message;
	}
	
	public static String packageXml(Object obj) throws Exception{
		
		return packageXml(obj, new ValidationEventHandler()
		{
			public boolean handleEvent(ValidationEvent event)
			{
				if (event.getMessage().contains("http://www.w3.org/2000/09/xmldsig#"))
				{
					return true;
				}
				throw new RuntimeException(String.format("Marshal XML Error: %s (Object: %s)",
						new Object[] { event.getMessage(), (event.getLocator() != null) && (event.getLocator().getObject() != null) ? event.getLocator().getObject().getClass() : "null" }));
			}
		});
	}
	

	public static String packageXml(Object obj, ValidationEventHandler handler) throws Exception {
		
		String xml = null;
		StringBuilder sb = null;
		try {
			sb = new StringBuilder();
			//response
			if(obj instanceof ROOT){
				ROOT root = (ROOT)obj;
				HEAD head = root.getHEAD();
				//head
				xml = packageDivideXml(head,handler);
				sb.append(xml);
				Object o = root.getBODY();
				if(o instanceof FFPCTI01){
					FFPCTI01 cti01 = (FFPCTI01)root.getBODY();
					//body
					xml = packageDivideXml(cti01,handler);
					sb.append(xml);
				}else if(o instanceof FFPCTO01){
					FFPCTO01 cto01 = (FFPCTO01)root.getBODY();
					//body
					xml = packageDivideXml(cto01,handler);
					sb.append(xml);
				}
			}else if(obj instanceof com.forms.ffp.adaptor.jaxb.participant.request.ROOT){
				com.forms.ffp.adaptor.jaxb.participant.request.ROOT root = (com.forms.ffp.adaptor.jaxb.participant.request.ROOT)obj;
				com.forms.ffp.adaptor.jaxb.participant.request.head.HEAD head = root.getHEAD();
				//head
				xml = packageDivideXml(head,handler);
				sb.append(xml);
				Object o = root.getBODY();
				if(o instanceof com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.FFPCTI01){
					com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.FFPCTI01 cti01 = (com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.FFPCTI01)root.getBODY();
					//body
					xml = packageDivideXml(cti01,handler);
					sb.append(xml);
				}else if(o instanceof com.forms.ffp.adaptor.jaxb.participant.request.ffpcto01.FFPCTO01){
					com.forms.ffp.adaptor.jaxb.participant.request.ffpcto01.FFPCTO01 cto01 = (com.forms.ffp.adaptor.jaxb.participant.request.ffpcto01.FFPCTO01)root.getBODY();
					//body
					xml = packageDivideXml(cto01,handler);
					sb.append(xml);
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return sb.toString();
	}
	
	public static String packageDivideXml(Object obj, ValidationEventHandler handler) throws Exception{
		Marshaller marshaller = null;
		StringWriter sw = new StringWriter();
		JAXBContext context = null;
		StringBuilder sb = new StringBuilder();
		boolean isHead = false;
		
		//response
		if(obj instanceof HEAD){
			context = JAXBContext.newInstance(HEAD.class);
			marshaller = context.createMarshaller();
			HEAD head = (HEAD)obj;
			JAXBElement<HEAD> headEle = (new ObjectFactory()).createHEAD(head);
			setMarshallerProperty(marshaller,handler);
			marshaller.marshal(headEle, sw);
			
			isHead = true;
		
			
		}else if(obj instanceof FFPCTI01){
			context = JAXBContext.newInstance(FFPCTI01.class);
			marshaller = context.createMarshaller();
			FFPCTI01 cti01 = (FFPCTI01)obj;
			JAXBElement<FFPCTI01> bodyEle = (new com.forms.ffp.adaptor.jaxb.participant.response.ffpcti01.ObjectFactory()).createBODY(cti01);
			setMarshallerProperty(marshaller,handler);
			marshaller.marshal(bodyEle, sw);
			
			//对报文进行进一步修正
//			String msg = sw.toString();
//			msg = msg.substring(msg.indexOf("?>")+2);
//			sb.append(msg);
			
		}else if(obj instanceof FFPCTO01){
			context = JAXBContext.newInstance(FFPCTO01.class);
			marshaller = context.createMarshaller();
			FFPCTO01 cto01 = (FFPCTO01)obj;
			JAXBElement<FFPCTO01> bodyEle = (new com.forms.ffp.adaptor.jaxb.participant.response.ffpcto01.ObjectFactory()).createBODY(cto01);
			setMarshallerProperty(marshaller,handler);
			marshaller.marshal(bodyEle, sw);
			
			//对报文进行进一步修正
//			String msg = sw.toString();
//			msg = msg.substring(msg.indexOf("?>")+2);
//			sb.append(msg);
		}
		//request
		else if(obj instanceof com.forms.ffp.adaptor.jaxb.participant.request.head.HEAD){
			context = JAXBContext.newInstance(com.forms.ffp.adaptor.jaxb.participant.request.head.HEAD.class);
			marshaller = context.createMarshaller();
			com.forms.ffp.adaptor.jaxb.participant.request.head.HEAD head = (com.forms.ffp.adaptor.jaxb.participant.request.head.HEAD)obj;
			JAXBElement<com.forms.ffp.adaptor.jaxb.participant.request.head.HEAD> headEle = (new com.forms.ffp.adaptor.jaxb.participant.request.head.ObjectFactory()).createHEAD(head);
			setMarshallerProperty(marshaller,handler);
			marshaller.marshal(headEle, sw);
			
			//对报文进行进一步修正
//			String msg = sw.toString();
//			String msgHead = msg.substring(0, msg.indexOf("?>")+2);
//			msg = msg.substring(msg.indexOf("?>")+2, msg.indexOf("</HEAD>")+7);
//			sb.append(msgHead);
//			sb.append('\n');
//			sb.append("<ROOT>");
//			sb.append(msg);
			isHead = true;
			
		}else if(obj instanceof com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.FFPCTI01){
			context = JAXBContext.newInstance(com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.FFPCTI01.class);
			marshaller = context.createMarshaller();
			com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.FFPCTI01 cti01 = (com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.FFPCTI01)obj;
			JAXBElement<com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.FFPCTI01> bodyEle = (new com.forms.ffp.adaptor.jaxb.participant.request.ffpcti01.ObjectFactory()).createBODY(cti01);
			setMarshallerProperty(marshaller,handler);
			marshaller.marshal(bodyEle, sw);
			
			//对报文进行进一步修正
//			String msg = sw.toString();
//			msg = msg.substring(msg.indexOf("?>")+2);
//			sb.append(msg);
			
		}else if(obj instanceof com.forms.ffp.adaptor.jaxb.participant.request.ffpcto01.FFPCTO01){
			context = JAXBContext.newInstance(com.forms.ffp.adaptor.jaxb.participant.request.ffpcto01.FFPCTO01.class);
			marshaller = context.createMarshaller();
			com.forms.ffp.adaptor.jaxb.participant.request.ffpcto01.FFPCTO01 cti01 = (com.forms.ffp.adaptor.jaxb.participant.request.ffpcto01.FFPCTO01)obj;
			JAXBElement<com.forms.ffp.adaptor.jaxb.participant.request.ffpcto01.FFPCTO01> bodyEle = (new com.forms.ffp.adaptor.jaxb.participant.request.ffpcto01.ObjectFactory()).createBODY(cti01);
			setMarshallerProperty(marshaller,handler);
			marshaller.marshal(bodyEle, sw);
			
			//对报文进行进一步修正
//			String msg = sw.toString();
//			msg = msg.substring(msg.indexOf("?>")+2);
//			sb.append(msg);
			
		}
		
		//对报文进行进一步修正
		sb = xmlConsist(sw, sb, isHead);
		return sb.toString();
	}
	
	public static StringBuilder xmlConsist(StringWriter sw, StringBuilder sb, boolean isHead){
		
		String msg = null;
		if(isHead){
			msg = sw.toString();
			String msgHead = msg.substring(0, msg.indexOf("?>")+2);
			msg = msg.substring(msg.indexOf("?>")+2, msg.indexOf("</HEAD>")+7);
			sb.append(msgHead);
			sb.append('\n');
			sb.append("<ROOT>");
			sb.append(msg);
		}else{
			msg = sw.toString();
			msg = msg.substring(msg.indexOf("?>")+2);
			sb.append(msg);
			sb.append("</ROOT>");
		}
		return sb;
	}
	
	
	public static void setMarshallerProperty(Marshaller marshaller, ValidationEventHandler handler) throws Exception{
		marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);// 格式化输出
		marshaller.setProperty(Marshaller.JAXB_ENCODING, "UTF-8");// 设置输出编码,默认为UTF-8
		marshaller.setEventHandler(handler); 
	}
	
}
